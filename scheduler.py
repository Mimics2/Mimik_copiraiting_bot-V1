import logging
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext
from datetime import datetime, timedelta
import re
import psutil
import os

from config import BOT_TOKEN, ADMIN_IDS, MOSCOW_TZ
from database import Database
from scheduler import PostScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SchedulerBot:
    def __init__(self):
        self.db = Database('scheduler.db')
        self.scheduler = PostScheduler(BOT_TOKEN, 'scheduler.db')
        self.user_states = {}
        self.start_time = datetime.now(MOSCOW_TZ)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("status", "–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –≤—Ä–µ–º—è"),
            BotCommand("add_channel", "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"),
            BotCommand("channels", "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"),
            BotCommand("add_post", "–î–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"),
            BotCommand("posts", "–°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"),
        ]
        
        await context.bot.set_my_commands(commands)
        
        current_time = datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')
        
        await update.message.reply_text(
            f"üìÖ **–ë–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π**\n\n"
            f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ: {current_time}\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –≤—Ä–µ–º—è\n"
            "/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
            "/channels - –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤\n"
            "/add_post - –î–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n"
            "/posts - –°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"
        )
    
    async def show_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞, –≤—Ä–µ–º—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        try:
            # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ
            current_time = datetime.now(MOSCOW_TZ)
            current_time_str = current_time.strftime('%d.%m.%Y %H:%M:%S')
            
            # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
            uptime = current_time - self.start_time
            hours, remainder = divmod(uptime.total_seconds(), 3600)
            minutes, seconds = divmod(remainder, 60)
            uptime_str = f"{int(hours)}—á {int(minutes)}–º {int(seconds)}—Å"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            channels = self.db.get_channels()
            posts = self.db.get_scheduled_posts()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            scheduled_count = len(posts)
            
            # –ë–ª–∏–∂–∞–π—à–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
            next_post_time = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"
            if posts:
                next_post = min(posts, key=lambda x: datetime.strptime(x[5], '%Y-%m-%d %H:%M:%S'))
                next_time = datetime.strptime(next_post[5], '%Y-%m-%d %H:%M:%S')
                next_post_time = MOSCOW_TZ.localize(next_time).strftime('%d.%m.%Y %H:%M')
            
            # –°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
            status_message = (
                f"ü§ñ **–°–¢–ê–¢–£–° –ë–û–¢–ê**\n\n"
                f"‚è∞ **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {current_time_str} (–ú–°–ö)\n"
                f"üïê **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {uptime_str}\n"
                f"üìä **–ö–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ:** {len(channels)}\n"
                f"üìÖ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:** {scheduled_count}\n"
                f"‚è± **–ë–ª–∏–∂–∞–π—à–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è:** {next_post_time}\n"
                f"üü¢ **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω\n\n"
                f"_–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_time.strftime('%H:%M:%S')}_"
            )
            
            await update.message.reply_text(status_message, parse_mode='Markdown')
            
        except Exception as e:
            logging.error(f"Error in status command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
    async def add_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        await update.message.reply_text(
            "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞**\n\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "3. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç"
        )
        self.user_states[user_id] = 'awaiting_channel'
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        if self.user_states.get(user_id) == 'awaiting_channel' and update.message.forward_from_chat:
            channel = update.message.forward_from_chat
            
            if channel.type == 'channel':
                success = self.db.add_channel(
                    channel.id,
                    channel.title,
                    channel.username
                )
                
                if success:
                    await update.message.reply_text(
                        f"‚úÖ –ö–∞–Ω–∞–ª **{channel.title}** —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
                
                self.user_states[user_id] = None
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
        if self.user_states.get(user_id) == 'awaiting_post_content':
            context.user_data['post_content'] = update.message.text
            context.user_data['media_type'] = 'text'
            
            current_time = datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M')
            await update.message.reply_text(
                f"‚è∞ **–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ –ú–æ—Å–∫–≤–µ**\n\n"
                f"–°–µ–π—á–∞—Å: {current_time} (–ú–°–ö)\n\n"
                "–§–æ—Ä–º–∞—Ç: `–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`\n"
                "–ü—Ä–∏–º–µ—Ä: `2024-12-25 15:30`",
                parse_mode='Markdown'
            )
            self.user_states[user_id] = 'awaiting_post_time'
            return
        
        if self.user_states.get(user_id) == 'awaiting_post_time':
            try:
                # –ü–∞—Ä—Å–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∫ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
                naive_time = datetime.strptime(update.message.text, '%Y-%m-%d %H:%M')
                moscow_time = MOSCOW_TZ.localize(naive_time)
                current_moscow_time = datetime.now(MOSCOW_TZ)
                
                if moscow_time <= current_moscow_time:
                    await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                channel_id = context.user_data.get('selected_channel')
                message_text = context.user_data.get('post_content', '')
                media_type = context.user_data.get('media_type', 'text')
                media_file_id = context.user_data.get('media_file_id', '')
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –ë–î
                scheduled_time_str = moscow_time.strftime('%Y-%m-%d %H:%M:%S')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
                success = self.scheduler.add_new_post(
                    channel_id, message_text, media_type, media_file_id, scheduled_time_str
                )
                
                if success:
                    formatted_time = moscow_time.strftime('%d.%m.%Y %H:%M')
                    await update.message.reply_text(
                        f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {formatted_time} (–ú–°–ö)"
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.user_states[user_id] = None
                context.user_data.clear()
                
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
    
    async def list_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        channels = self.db.get_channels()
        
        if not channels:
            await update.message.reply_text("üì≠ –ö–∞–Ω–∞–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            return
        
        message = "üìã **–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:**\n\n"
        for channel in channels:
            message += f"‚Ä¢ {channel[2]} (@{channel[3]})\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def add_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        channels = self.db.get_channels()
        
        if not channels:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ /add_channel")
            return
        
        current_time = datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M')
        await update.message.reply_text(
            f"üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
            f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time} (–ú–°–ö)\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:"
        )
        
        self.user_states[user_id] = 'awaiting_post_content'
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –≤—ã–±–æ—Ä)
        context.user_data['selected_channel'] = channels[0][0]
    
    async def list_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        posts = self.db.get_scheduled_posts()
        
        if not posts:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
            return
        
        current_time = datetime.now(MOSCOW_TZ)
        message = f"üìã **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏** (–ú–°–ö):\n\n"
        
        for post in posts:
            post_time = datetime.strptime(post[5], '%Y-%m-%d %H:%M:%S')
            moscow_time = MOSCOW_TZ.localize(post_time)
            time_str = moscow_time.strftime('%d.%m.%Y %H:%M')
            message += f"‚Ä¢ {time_str} - {post[9]}\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')

def main():
    bot = SchedulerBot()
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("status", bot.show_status))
    application.add_handler(CommandHandler("add_channel", bot.add_channel))
    application.add_handler(CommandHandler("channels", bot.list_channels))
    application.add_handler(CommandHandler("add_post", bot.add_post))
    application.add_handler(CommandHandler("posts", bot.list_posts))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    current_time = datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')
    print(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    print(f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ø–æ –ú–æ—Å–∫–≤–µ: {current_time}")
    print(f"üìä –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /status")
    application.run_polling()

if __name__ == '__main__':
    main()