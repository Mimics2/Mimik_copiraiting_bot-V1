import logging
from datetime import datetime, timedelta
import pytz
import re 
import httpx # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import uuid 
import traceback
import os
import json
import asyncio

from telegram import Update, BotCommand, constants, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext, CallbackQueryHandler
from aiohttp import web 

from config import (BOT_TOKEN, ADMIN_IDS, CRYPTO_CLOUD_API_KEY, 
                    CRYPTO_CLOUD_CREATE_URL, CRYPTO_CLOUD_WEBHOOK_SECRET, 
                    WEB_SERVER_PORT, WEBHOOK_PATH, MOSCOW_TZ, WEB_SERVER_BASE_URL, WEBHOOK_URL)
from database import Database

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ë–æ—Ç–∞ ---

class SchedulerBot:
    def __init__(self):
        self.db = Database() 
        for admin_id in ADMIN_IDS:
            self.db.add_admin(admin_id, username="Initial_Config_Admin")
            
        self.start_time = datetime.now(MOSCOW_TZ)
        self.user_states = {}
        # –ó–∞–≥—Ä—É–∑–∫–∞ admin_ids –∏–∑ –±–∞–∑—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
        self.admin_ids = self.db.get_admin_ids() 

    # --- –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê ---

    def is_user_admin(self, user_id):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π
        self.admin_ids = self.db.get_admin_ids() 
        return user_id in self.admin_ids

    # --- –°–¢–ê–†–¢ / –°–¢–ê–¢–£–° ---

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        if not self.is_user_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("status", "–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –≤—Ä–µ–º—è"),
            BotCommand("add_channel", "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"),
            BotCommand("channels", "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"),
            BotCommand("add_post", "–î–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"),
            BotCommand("posts", "–°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"),
            BotCommand("deposit", "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å"),
            BotCommand("balance", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å"), # –î–æ–±–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É balance
        ]
        
        await context.bot.set_my_commands(commands)
        
        balance = self.db.get_user_balance(user_id)
        
        message = (
            f"‚úÖ –ë–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω!\n"
            f"üë§ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä**.\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: **{balance:.2f} USD**.\n"
            f"‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏."
        )
        await update.message.reply_text(message, parse_mode='Markdown')

    async def show_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id):
            return
        
        uptime = datetime.now(MOSCOW_TZ) - self.start_time
        
        hours, remainder = divmod(int(uptime.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        
        status_message = (
            f"ü§ñ –°—Ç–∞—Ç—É—Å: **–†–ê–ë–û–¢–ê–ï–¢**\n"
            f"üï∞Ô∏è –ó–∞–ø—É—â–µ–Ω: {self.start_time.strftime('%d.%m.%Y %H:%M:%S')} –ú–°–ö\n"
            f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime.days} –¥–Ω., {hours} —á., {minutes} –º–∏–Ω."
        )
        await update.message.reply_text(status_message, parse_mode='Markdown')

    async def show_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id):
            return
        
        user_id = update.effective_user.id
        balance = self.db.get_user_balance(user_id)
        
        await update.message.reply_text(
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{balance:.2f} USD**.",
            parse_mode='Markdown'
        )

    # --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê–ú–ò ---

    async def add_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id):
            return

        await update.message.reply_text(
            "–ù–∞–ø–∏—à–∏—Ç–µ @username –∏–ª–∏ ID (—Ü–∏—Ñ—Ä–∞–º–∏) –∫–∞–Ω–∞–ª–∞, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∏—Ç—å, "
            "–∏ **–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è —Ç—É–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º**."
        )
        self.user_states[update.effective_user.id] = 'awaiting_channel'

    async def list_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id):
            return
        
        channels = self.db.get_all_channels()
        
        if not channels:
            await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
            return

        message = "üìã **–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:**\n\n"
        for i, channel in enumerate(channels, 1):
            channel_id, title, username = channel[1], channel[2], channel[3]
            
            # –ï—Å–ª–∏ title –Ω–µ —É–∫–∞–∑–∞–Ω (–Ω–∞–ø—Ä., –¥–ª—è ID), –∏—Å–ø–æ–ª—å–∑—É–µ–º username/ID
            name = title if title else (f"@{username}" if username else str(channel_id))
            
            message += f"{i}. **{name}** (ID: `{channel_id}`)\n"
            
        await update.message.reply_text(message, parse_mode='Markdown')

    # --- –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –ü–£–ë–õ–ò–ö–ê–¶–ò–ò ---

    async def add_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id):
            return

        channels = self.db.get_all_channels()
        
        if not channels:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π /add_channel."
            )
            return

        buttons = []
        for channel in channels:
            channel_id, title, username = channel[1], channel[2], channel[3]
            name = title if title else (f"@{username}" if username else str(channel_id))
            buttons.append([InlineKeyboardButton(name, callback_data=f"select_channel_{channel_id}")])

        reply_markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=reply_markup)

        self.user_states[update.effective_user.id] = {'stage': 'awaiting_channel_for_post', 'data': {}}


    async def list_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id):
            return

        posts = self.db.get_scheduled_posts()
        
        if not posts:
            await update.message.reply_text("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: (post_id, channel_id, message_text, scheduled_time_str, status, created_date, media_file_id, media_type, channel_title, tg_channel_id)
        current_time = datetime.now(MOSCOW_TZ)
        message = f"üìã **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏** (–ú–°–ö):\\n\\n"
        
        for post in posts:
            post_id, db_channel_id, message_text, scheduled_time_str, status, created_date, media_file_id, media_type, channel_title, tg_channel_id = post
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –æ–±—ä–µ–∫—Ç datetime –∏ –ª–æ–∫–∞–ª–∏–∑—É–µ–º –µ–≥–æ
            try:
                post_time_utc = datetime.strptime(scheduled_time_str, '%Y-%m-%d %H:%M:%S').replace(tzinfo=pytz.utc)
            except ValueError:
                # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–∞–∑–µ –Ω–µ–≤–µ—Ä–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                continue 
            
            moscow_time = post_time_utc.astimezone(MOSCOW_TZ)
            time_str = moscow_time.strftime('%d.%m.%Y %H:%M')
            
            channel_name = channel_title if channel_title else str(tg_channel_id)
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–≤—å—é
            text_preview = message_text.split('\n')[0][:50] + "..." if message_text and len(message_text) > 50 else (message_text or " [–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç] ")
            media_info = f" ({media_type.upper()})" if media_type else ""
            
            message += f"‚Ä¢ `{post_id}`: **{time_str}** –≤ **{channel_name}**{media_info} - {text_preview}\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')

    # --- –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ù–´–ï –ü–õ–ê–¢–ï–ñ–ò (DEPOSIT) ---
    
    async def deposit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id):
            return
        
        await update.message.reply_text(
            "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ **USD**, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å. "
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1 USD."
        )
        self.user_states[update.effective_user.id] = {'stage': 'awaiting_deposit_amount'}

    async def process_deposit_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        if self.user_states.get(user_id, {}).get('stage') != 'awaiting_deposit_amount':
            return
        
        try:
            amount = float(update.message.text)
            if amount < 1.0:
                await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 1 USD. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        order_id = str(uuid.uuid4())
        
        headers = {
            "Authorization": f"Token {CRYPTO_CLOUD_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "amount": amount,
            "currency": "USD",
            "order_id": order_id,
            "shop_id": "0",
            "period": 10,
            "webhook_url": WEBHOOK_URL,
            "success_url": WEB_SERVER_BASE_URL
        }
        
        async with httpx.AsyncClient() as client:
            try:
                response = await client.post(CRYPTO_CLOUD_CREATE_URL, headers=headers, json=payload)
                data = response.json()
                
                if response.status_code == 200 and data.get('status') == 'success':
                    pay_url = data['result']['pay_url']
                    
                    self.db.add_payment(user_id, amount, order_id, 'pending', pay_url)
                    
                    keyboard = [[InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay_url)]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await update.message.reply_text(
                        f"üí∞ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ **{amount} USD**.\n"
                        f"üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                else:
                    logger.error(f"CryptoCloud error: {data}")
                    await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã. –û—à–∏–±–∫–∞: {data.get('message', response.text)}")
                    
            except Exception as e:
                logger.error(f"HTTP error during deposit: {e}")
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–≤—è–∑–∏ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.")

        self.user_states.pop(user_id, None)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π ---

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        if not self.is_user_admin(user_id):
            return

        state = self.user_states.get(user_id, {}).get('stage')
        state_data = self.user_states.get(user_id, {}).get('data', {})

        if state == 'awaiting_channel':
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ ---
            text = update.message.text.strip()
            channel_identifier = text.replace('@', '')
            
            try:
                chat = await context.bot.get_chat(channel_identifier)
                
                if chat.type not in [constants.ChatType.CHANNEL, constants.ChatType.SUPERGROUP]:
                    await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞–Ω–∞–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª –∏–ª–∏ –≤–∞—à –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–µ–≥–æ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
                    return
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
                try:
                    me = await context.bot.get_me()
                    chat_member = await context.bot.get_chat_member(chat.id, me.id)
                    if chat_member.status not in [constants.ChatMember.ADMINISTRATOR, constants.ChatMember.CREATOR]:
                        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∞–π—Ç–µ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
                        return
                except Exception:
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –∏–Ω–∞—á–µ –ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.")

                
                self.db.add_channel(
                    channel_id=chat.id, 
                    title=chat.title, 
                    username=chat.username
                )
                
                await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª **{chat.title}** (ID: `{chat.id}`) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode='Markdown')
                self.user_states.pop(user_id) 
                
            except Exception as e:
                logger.error(f"Error adding channel: {traceback.format_exc()}")
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ. "
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
                    "1. –í—ã –≤–≤–µ–ª–∏ –≤–µ—Ä–Ω—ã–π @username –∏–ª–∏ ID.\n"
                    "2. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä."
                )
        
        elif state == 'awaiting_deposit_amount':
            await self.process_deposit_amount(update, context)

        elif state == 'awaiting_post_text':
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ ---
            
            state_data['text'] = update.message.text
            self.user_states[user_id]['stage'] = 'awaiting_post_time'
            
            await update.message.reply_text(
                "üìÖ –í–≤–µ–¥–∏—Ç–µ **–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è** –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `2025-10-10 14:30`) "
                "–ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–ú–°–ö)."
            )

        elif state == 'awaiting_post_time':
            # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å—Ç–∞ ---
            
            time_str = update.message.text.strip()
            
            try:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
                post_datetime = datetime.strptime(time_str, '%Y-%m-%d %H:%M')
                # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ú–°–ö
                post_datetime_moscow = MOSCOW_TZ.localize(post_datetime)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ
                post_datetime_utc = post_datetime_moscow.astimezone(pytz.utc)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
                if post_datetime_moscow <= datetime.now(MOSCOW_TZ) + timedelta(minutes=1):
                    await update.message.reply_text(
                        "‚ùå –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –Ω–∞ 1 –º–∏–Ω—É—Ç—É –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                    )
                    return
                
                # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å—Ç
                channel_id_tg = state_data['channel_id_tg']
                
                channel_data = self.db.get_channel_by_tg_id(channel_id_tg)
                if not channel_data:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
                    self.user_states.pop(user_id)
                    return
                
                db_channel_id = channel_data[0] # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∫–∞–Ω–∞–ª–∞ –≤ –ë–î
                
                post_id = self.db.add_post(
                    channel_id=db_channel_id, 
                    message_text=state_data.get('text', ''), 
                    scheduled_time=post_datetime_utc,
                )
                
                if post_id:
                    await update.message.reply_text(
                        f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è **#{post_id}** —É—Å–ø–µ—à–Ω–æ **–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞**!\n"
                        f"–ö–∞–Ω–∞–ª: **{channel_data[2]}**\n"
                        f"–í—Ä–µ–º—è (–ú–°–ö): **{post_datetime_moscow.strftime('%d.%m.%Y %H:%M')}**\n\n"
                        "–¢–µ–∫—Å—Ç:\n"
                        f"```\\n{state_data.get('text', '')[:200]}...\\n```"
                    , parse_mode='Markdown')
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑—É.")
                
                self.user_states.pop(user_id) # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`."
                )

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ù–ê–ñ–ê–¢–ò–ô –ö–ù–û–ü–û–ö ---
    
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        
        await query.answer()

        if not self.is_user_admin(user_id):
            return

        data = query.data
        
        if data.startswith('select_channel_'):
            # --- –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ ---
            try:
                channel_id_tg = int(data.split('_')[-1])
            except ValueError:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞
            self.user_states[user_id]['stage'] = 'awaiting_post_text'
            self.user_states[user_id]['data']['channel_id_tg'] = channel_id_tg
            
            await query.edit_message_text(
                "üí¨ –ö–∞–Ω–∞–ª –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **—Ç–µ–∫—Å—Ç** —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. "
                "(–ü–æ–∫–∞ –±–µ–∑ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)"
            )

# --- WebHook / CryptoCloud Handlers ---

async def cryptocloud_webhook_handler(request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è WebHook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç CryptoCloud.
    """
    try:
        data = await request.json()
        order_id = data.get('order_id')
        status = data.get('status') # 'success', 'fail'
        amount = data.get('amount')
        
        logger.info(f"CryptoCloud Webhook received: Order {order_id}, Status: {status}")
        
        if order_id and status:
            application = request.app['bot_app']
            bot_logic = application.bot_logic
            
            # –ü–æ–ª—É—á–∞–µ–º Application, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            
            payment_info = bot_logic.db.get_payment_by_order_id(order_id)
            if payment_info:
                db_id, user_id, payment_amount = payment_info[0], payment_info[1], payment_info[2]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                bot_logic.db.update_payment_status(order_id, status)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if status == 'success':
                    bot_logic.db.add_balance(user_id, payment_amount)
                    message = f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω! **{payment_amount} USD** –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç."
                elif status == 'fail':
                    message = f"‚ùå –ü–ª–∞—Ç–µ–∂ –ø–æ –∑–∞–∫–∞–∑—É `{order_id}` –Ω–µ —É–¥–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                else:
                    message = f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ `{order_id}`: {status}."
                    
                await application.bot.send_message(chat_id=user_id, text=message, parse_mode='Markdown')
                
            else:
                logger.warning(f"CryptoCloud Webhook: Payment with order_id {order_id} not found in DB.")
                
            return web.json_response({'status': 'ok'})
        
        return web.json_response({'status': 'error', 'message': 'Invalid data'}, status=400)
        
    except Exception as e:
        logger.error(f"Error in CryptoCloud webhook handler: {traceback.format_exc()}")
        return web.json_response({'status': 'error', 'message': 'Internal server error'}, status=500)


def main():
    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    bot_logic = SchedulerBot()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Application
    # –í–ê–ñ–ù–û: PTB 21+ —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã CallbackQueryHandler –±—ã–ª –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.bot_logic = bot_logic
    
    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
    
    application.add_handler(CommandHandler("start", bot_logic.start))
    application.add_handler(CommandHandler("status", bot_logic.show_status))
    application.add_handler(CommandHandler("balance", bot_logic.show_balance)) # –î–æ–±–∞–≤–ª–µ–Ω
    application.add_handler(CommandHandler("add_channel", bot_logic.add_channel))
    application.add_handler(CommandHandler("channels", bot_logic.list_channels))
    application.add_handler(CommandHandler("add_post", bot_logic.add_post))
    application.add_handler(CommandHandler("posts", bot_logic.list_posts))
    application.add_handler(CommandHandler("deposit", bot_logic.deposit))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Inline-–∫–Ω–æ–ø–æ–∫
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç CallbackQueryHandler
    application.add_handler(CallbackQueryHandler(bot_logic.handle_callback_query, pattern='^select_channel_'))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, bot_logic.handle_message))


    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    async def start_webhook_server():
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebHook –¥–ª—è Telegram
        await application.bot.set_webhook(url=f"{WEB_SERVER_BASE_URL}/{BOT_TOKEN}")
        
        # –°–æ–∑–¥–∞–µ–º AIOHTTP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = web.Application()
        app['bot_app'] = application
        
        # 1. WebHook –¥–ª—è Telegram (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å)
        app.router.add_post(f"/{BOT_TOKEN}", application.update_queue.put) 
        
        # 2. WebHook –¥–ª—è CryptoCloud (–∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—É—Ç—å)
        app.router.add_post(WEBHOOK_PATH, cryptocloud_webhook_handler)

        # 3. –ó–∞–ø—É—Å–∫ AIOHTTP —Å–µ—Ä–≤–µ—Ä–∞ (–∑–∞—Ö–≤–∞—Ç –ø–æ—Ä—Ç–∞ 8080)
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', WEB_SERVER_PORT)
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ WebHook-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {WEB_SERVER_PORT}")
        await site.start()
        
        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º Telegram Application –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
        await application.initialize()
        await application.start()
        
        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò ATTRIBUTEERROR ---
        # –í–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ application.run_until_shutdown()
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        while True:
            # –ñ–¥–µ–º –¥–æ–ª–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è. Railway –±—É–¥–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –µ–≥–æ.
            await asyncio.sleep(3600) 
            
        # application.stop() –Ω–µ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (Railway)

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ
        asyncio.run(start_webhook_server())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception:
        logger.error(f"–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {traceback.format_exc()}")

if __name__ == '__main__':
    main()
