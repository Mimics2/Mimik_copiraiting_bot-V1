import logging
from datetime import datetime, timedelta
import pytz
import re 
from telegram import Update, BotCommand, ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from config import BOT_TOKEN, ADMIN_IDS
from database import Database

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ú–æ—Å–∫–≤—É –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

class SchedulerBot:
    def __init__(self):
        self.db = Database() 
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –î–æ–±–∞–≤–ª—è–µ–º ID –∏–∑ config.py –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            self.db.add_admin(admin_id, username="Initial_Config_Admin")
            
        self.start_time = datetime.now(MOSCOW_TZ)
        self.user_states = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.admin_ids = self.db.get_admin_ids() # –ö–µ—à–∏—Ä—É–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

    # --- –ü–†–û–í–ï–†–ö–ê –ê–î–ú–ò–ù–ê (–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–∑–¥–µ) ---
    def is_user_admin(self, user_id):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
        self.admin_ids = self.db.get_admin_ids()
        return user_id in self.admin_ids

    # --- –§–£–ù–ö–¶–ò–ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø ---
    async def check_posts_job(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        try:
            posts = self.db.get_posts()
            current_time = datetime.now(MOSCOW_TZ)

            # post: 0-id, 1-channel_db_id, 2-message_text, 3-scheduled_time_str, 4-status, 5-created_date, 6-media_file_id, 7-media_type, 8-channel_title, 9-tg_channel_id

            for post in posts:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
                post_id, _, message_text, scheduled_time_str, _, _, media_file_id, media_type, _, tg_channel_id = post
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
                post_time_naive = datetime.strptime(scheduled_time_str, '%Y-%m-%d %H:%M:%S')
                post_time_aware = MOSCOW_TZ.localize(post_time_naive)

                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç–∞–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
                if post_time_aware <= current_time:
                    logger.info(f"–ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç {post_id} ({media_type or '—Ç–µ–∫—Å—Ç'}) –≤ –∫–∞–Ω–∞–ª {tg_channel_id}")
                    await self.publish_post(post_id, tg_channel_id, message_text, media_file_id, media_type, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")

    async def publish_post(self, post_id, channel_id, message_text, media_file_id, media_type, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å –º–µ–¥–∏–∞ –∏–ª–∏ –±–µ–∑) –≤ –∫–∞–Ω–∞–ª –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å."""
        try:
            tg_channel_id_str = str(channel_id)
            
            # Telegram API —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å caption –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –º–µ–¥–∏–∞
            caption_text = message_text if media_file_id else None
            
            if media_type == 'photo':
                await context.bot.send_photo(
                    chat_id=tg_channel_id_str,
                    photo=media_file_id,
                    caption=caption_text,
                    parse_mode='HTML'
                )
            elif media_type == 'video':
                await context.bot.send_video(
                    chat_id=tg_channel_id_str,
                    video=media_file_id,
                    caption=caption_text,
                    parse_mode='HTML'
                )
            else: # –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await context.bot.send_message(
                    chat_id=tg_channel_id_str, 
                    text=message_text, 
                    parse_mode='HTML'
                )

            self.db.update_post_status(post_id, 'published')
            logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} ({media_type or '—Ç–µ–∫—Å—Ç'}) —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {channel_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id} –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            self.db.update_post_status(post_id, 'error')


    # --- –ö–û–ú–ê–ù–î–´ –°–¢–ê–¢–£–°–ê –ò –ò–ù–§–û–†–ú–ê–¶–ò–ò ---
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): 
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        commands = [
            BotCommand("status", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
            BotCommand("time", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö)"),
            BotCommand("add_channel", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª"),
            BotCommand("manual_channel", "–†—É—á–Ω–æ–π –≤–≤–æ–¥ ID –∫–∞–Ω–∞–ª–∞"),
            BotCommand("set_prompt", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç –ò–ò –¥–ª—è –∫–∞–Ω–∞–ª–∞"),
            BotCommand("add_admin", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"),
            BotCommand("channels", "–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"),
            BotCommand("admins", "–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"),
            BotCommand("add_post", "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç (—Å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ)"),
            BotCommand("posts", "–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"),
            BotCommand("test_post", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"),
        ]
        await context.bot.set_my_commands(commands)

        await update.message.reply_text(
            "<b>ü§ñ –ë–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n"
            "/add_post - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞\n"
            "/set_prompt - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ò–ò –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n"
            "/add_admin - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞",
            parse_mode='HTML'
        )

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): return

        uptime = datetime.now(MOSCOW_TZ) - self.start_time
        hours, rem = divmod(uptime.total_seconds(), 3600)
        minutes, _ = divmod(rem, 60)
        
        channels = self.db.get_channels()
        posts = self.db.get_posts()
        
        next_post_str = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"
        if posts:
            next_post_time_naive = datetime.strptime(posts[0][3], '%Y-%m-%d %H:%M:%S')
            next_post_str = MOSCOW_TZ.localize(next_post_time_naive).strftime('%d.%m.%Y –≤ %H:%M')

        message = (
            f"<b>ü§ñ –°–¢–ê–¢–£–° –ë–û–¢–ê</b>\n\n"
            f"<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {int(hours)}—á {int(minutes)}–º\n"
            f"<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤:</b> {len(channels)}\n"
            f"<b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤:</b> {len(posts)}\n"
            f"<b>–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç:</b> {next_post_str}\n"
            f"<b>–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:</b> {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}"
        )
        await update.message.reply_text(message, parse_mode='HTML')

    async def show_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): return
        current_time = datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ (–ú–°–ö): \n<b>{current_time}</b>",
            parse_mode='HTML'
        )

    async def test_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): return

        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞.")
            return
            
        tg_channel_id = channels[0][1] # TG ID –∫–∞–Ω–∞–ª–∞
        channel_title = channels[0][2]
        test_message = f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞! –í—Ä–µ–º—è: {datetime.now(MOSCOW_TZ).strftime('%H:%M:%S')}"

        await update.message.reply_text(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ <b>{channel_title}</b> ({tg_channel_id})...", parse_mode='HTML')
        
        try:
            await context.bot.send_message(chat_id=str(tg_channel_id), text=test_message)
            await update.message.reply_text(f"‚úÖ **–£–°–ü–ï–•!** –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", parse_mode='HTML')
        except Exception as e:
            await update.message.reply_text(f"‚ùå **–û–®–ò–ë–ö–ê!** –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç.\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: <code>{e}</code>\n\n"
                                          "<b>–í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞:</b> –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø—Ä–∞–≤–∞ '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π'.", 
                                          parse_mode='HTML')


    # --- –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–ù–ê–õ–ê–ú–ò –ò –ö–û–ù–¢–ï–ù–¢–û–ú ---

    async def add_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): return
        self.user_states[update.effective_user.id] = 'awaiting_channel_forward'
        await update.message.reply_text(
            "<b>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É:</b>\n"
            "1. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ —Å –ø—Ä–∞–≤–æ–º –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>/manual_channel</b> –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞."
            , parse_mode='HTML'
        )
    
    async def manual_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): return
        self.user_states[update.effective_user.id] = 'awaiting_channel_manual_id'
        await update.message.reply_text(
            "<b>–†–ï–ñ–ò–ú –†–£–ß–ù–û–ì–û –í–í–û–î–ê:</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>-1001234567890</code>) –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b> <code>-ID,–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</code>",
            parse_mode='HTML'
        )

    async def list_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): return
        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("–ö–∞–Ω–∞–ª—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel.")
            return
        
        message = "<b>üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ channel: 0-id (DB), 1-channel_id (TG), 2-title, 3-username, 4-added_date, 5-default_prompt
        for db_id, tg_id, title, username, _, default_prompt in channels:
            prompt_status = "‚úÖ –ï—Å—Ç—å –ø—Ä–æ–º–ø—Ç" if default_prompt else "‚ùå –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–∞"
            message += f"‚Ä¢ {title} ({prompt_status})\n"
            message += f"  (ID: <code>{tg_id}</code>, –í–Ω—É—Ç—Ä. ID: <code>{db_id}</code>)\n"
        await update.message.reply_text(message, parse_mode='HTML')

    async def add_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): return
        
        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é /add_channel.")
            return

        # 1. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
        message = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        # channel: 0-id (DB), 1-channel_id (TG), 2-title
        for db_id, _, title, _, _, _ in channels:
            message += f"‚Ä¢ <b>{title}</b> (–í–Ω—É—Ç—Ä. ID: <code>{db_id}</code>)\n"
        
        message += "\n–í–≤–µ–¥–∏—Ç–µ **–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID** –∫–∞–Ω–∞–ª–∞ (—á–∏—Å–ª–æ –≤ —Å–∫–æ–±–∫–∞—Ö)."
        
        self.user_states[update.effective_user.id] = 'awaiting_target_channel_id'
        await update.message.reply_text(message, parse_mode='HTML')


    async def list_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): return
        posts = self.db.get_posts()
        if not posts:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
            return

        message = "<b>üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã (–ø–æ –ú–°–ö):</b>\n\n"
        # post: 0-id, 1-channel_db_id, 2-message_text, 3-scheduled_time_str, 7-media_type, 8-channel_title
        for post in posts:
            post_id, _, message_text, scheduled_time_str, _, _, _, media_type, channel_title, _ = post
            post_time_naive = datetime.strptime(scheduled_time_str, '%Y-%m-%d %H:%M:%S')
            time_formatted = MOSCOW_TZ.localize(post_time_naive).strftime('%d.%m.%Y %H:%M')
            
            media_info = f" ({media_type.upper()})" if media_type else ""
            
            text_snippet = message_text[:40].replace('\n', ' ') + ('...' if len(message_text) > 40 else '')
            message += f"‚Ä¢ <b>{time_formatted}</b>{media_info} –≤ '{channel_title}'\n"
            message += f"  <i>–¢–µ–∫—Å—Ç: {text_snippet}</i>\n"
        await update.message.reply_text(message, parse_mode='HTML')


    # --- –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–ê–ú–ò –ò –ü–†–û–ú–ü–¢–ê–ú–ò ---

    async def add_admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–∑ –ë–î
        if not self.is_user_admin(update.effective_user.id): return 
        
        self.user_states[update.effective_user.id] = 'awaiting_new_admin_id'
        await update.message.reply_text(
            "<b>–í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—á–∏—Å–ª–æ)</b>. \n\n"
            "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å ID, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /myid –ª—é–±–æ–º—É –ø—É–±–ª–∏—á–Ω–æ–º—É –±–æ—Ç—É.",
            parse_mode='HTML'
        )

    async def list_admins(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."""
        if not self.is_user_admin(update.effective_user.id): return
        
        admins = self.db.get_admins()
        if not admins:
            await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return
            
        message = "<b>üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n"
        # admin: 0-id, 1-user_id, 2-username, 3-added_date
        for _, user_id, username, _ in admins:
            status = " (–ì–ª–∞–≤–Ω—ã–π)" if user_id in ADMIN_IDS else ""
            message += f"‚Ä¢ <code>{user_id}</code>: {username or '–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'}{status}\n"
        
        await update.message.reply_text(message, parse_mode='HTML')


    async def set_prompt_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): return

        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª!")
            return

        message = "<b>üìù –í–≤–µ–¥–∏—Ç–µ Telegram ID –∫–∞–Ω–∞–ª–∞ (–≤–∫–ª—é—á–∞—è -100...), –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é (–ø—Ä–æ–º–ø—Ç):</b>\n\n"
        # channel: 0-id, 1-channel_id (TG), 2-title, 5-default_prompt
        for _, tg_id, title, _, _, default_prompt in channels:
            status = "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if default_prompt else "‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            message += f"‚Ä¢ <b>{title}</b> (ID: <code>{tg_id}</code>) - {status}\n"
        
        self.user_states[update.effective_user.id] = 'awaiting_prompt_channel_id'
        await update.message.reply_text(message, parse_mode='HTML')


    # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô (HANDLE_MESSAGE) ---
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id) or user_id not in self.user_states: return

        state = self.user_states[user_id]
        
        # 1. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–ò–í–Ø–ó–ö–ê (/add_channel)
        if state == 'awaiting_channel_forward':
            channel = None
            if update.message.forward_from_chat and update.message.forward_from_chat.type == 'channel':
                channel = update.message.forward_from_chat
            elif update.message.sender_chat and update.message.sender_chat.type == 'channel':
                channel = update.message.sender_chat

            if channel:
                title = channel.title
                username = channel.username if hasattr(channel, 'username') else None
                tg_channel_id = channel.id

                if self.db.add_channel(tg_channel_id, title, username):
                    await update.message.reply_text(
                        f"‚úÖ –ö–∞–Ω–∞–ª '<b>{title}</b>' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É!\n"
                        f"Telegram ID: <code>{tg_channel_id}</code>", 
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ (–ë–î).")
                del self.user_states[user_id] 
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥: <b>/manual_channel</b>"
                    , parse_mode='HTML'
                )

        # 2. –†–£–ß–ù–ê–Ø –ü–†–ò–í–Ø–ó–ö–ê (/manual_channel)
        elif state == 'awaiting_channel_manual_id':
            text = update.message.text.strip()
            match = re.match(r'^(-?\d+),(.*)$', text)
            
            if match:
                tg_channel_id = int(match.group(1))
                title = match.group(2).strip()
                username = None
                
                if self.db.add_channel(tg_channel_id, title, username):
                    await update.message.reply_text(
                        f"‚úÖ –ö–∞–Ω–∞–ª '<b>{title}</b>' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é!\n"
                        f"Telegram ID: <code>{tg_channel_id}</code>", 
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ (–ë–î).")
                del self.user_states[user_id]
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>-ID,–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</code>", 
                    parse_mode='HTML'
                )
        
        # 3. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê (/add_admin)
        elif state == 'awaiting_new_admin_id':
            try:
                new_admin_id = int(update.message.text.strip())
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
                try:
                    chat_info = await context.bot.get_chat(new_admin_id)
                    username = chat_info.username or chat_info.full_name
                except Exception:
                    username = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID {new_admin_id}"
                
                if self.db.add_admin(new_admin_id, username):
                    await update.message.reply_text(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{username}</b> (ID: <code>{new_admin_id}</code>) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∞–¥–º–∏–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                
                del self.user_states[user_id]
                
            except ValueError:
                await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

        # 4. –û–ñ–ò–î–ê–ù–ò–ï –í–´–ë–û–†–ê –ö–ê–ù–ê–õ–ê –î–õ–Ø –ü–û–°–¢–ê (/add_post)
        elif state == 'awaiting_target_channel_id':
            try:
                db_id = int(update.message.text.strip())
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID
                channel_info = self.db.get_channel_info_by_db_id(db_id) 
                
                if not channel_info:
                    await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return
                
                context.user_data['target_channel_id'] = db_id # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –ë–î
                context.user_data['target_channel_title'] = channel_info[2]
                
                self.user_states[user_id] = 'awaiting_post_text'
                await update.message.reply_text(
                    f"–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª <b>{channel_info[2]}</b>. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ç–µ–∫—Å—Ç** –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞.\n\n"
                    "<i>(–¢–µ–∫—Å—Ç –¥–ª—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ —É–∫–∞–∂–∏—Ç–µ –≤ –ø–æ–¥–ø–∏—Å–∏!)</i>", 
                    parse_mode='HTML'
                )

            except ValueError:
                await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

        
        # 5. –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–ö–°–¢–ê / –ú–ï–î–ò–ê –ü–û–°–¢–ê (–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ /add_post)
        elif state == 'awaiting_post_text': 
            
            media_id = None
            media_type = None
            text = ""

            if update.message.photo:
                media_id = update.message.photo[-1].file_id
                media_type = 'photo'
                text = update.message.caption or ""
            
            elif update.message.video:
                media_id = update.message.video.file_id
                media_type = 'video'
                text = update.message.caption or ""

            elif update.message.text:
                text = update.message.text
                
            else:
                await update.message.reply_text("‚ùå –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç. –î—Ä—É–≥–æ–π —Ç–∏–ø –º–µ–¥–∏–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
                return

            if not text and not media_id:
                await update.message.reply_text("‚ùå –ü–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª —Å –ø–æ–¥–ø–∏—Å—å—é.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
            context.user_data['post_text'] = text
            context.user_data['media_file_id'] = media_id
            context.user_data['media_type'] = media_type

            self.user_states[user_id] = 'awaiting_post_time'
            
            media_status = f"‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª ({media_type}) –ø—Ä–∏–Ω—è—Ç." if media_id else "‚úÖ –¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç."
            await update.message.reply_text(
                f"{media_status}\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ –ú–°–ö).\n\n"
                "<b>–§–æ—Ä–º–∞—Ç:</b> <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code>\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>2025-12-31 18:00</code>",
                parse_mode='HTML'
            )


        # 6. –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ü–û–°–¢–ê
        elif state == 'awaiting_post_time':
            try:
                naive_time = datetime.strptime(update.message.text, '%Y-%m-%d %H:%M')
                aware_time = MOSCOW_TZ.localize(naive_time)

                if aware_time <= datetime.now(MOSCOW_TZ):
                    await update.message.reply_text("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return

                channel_db_id = context.user_data['target_channel_id']
                post_text = context.user_data['post_text']
                media_file_id = context.user_data.get('media_file_id')
                media_type = context.user_data.get('media_type')
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–º–∏
                if self.db.add_post(channel_db_id, post_text, aware_time.strftime('%Y-%m-%d %H:%M:%S'), media_file_id, media_type):
                    channel_title = context.user_data['target_channel_title']
                    media_info = f" ({media_type.upper()})" if media_type else ""
                    await update.message.reply_text(
                        f"‚úÖ –ü–æ—Å—Ç{media_info} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª <b>{channel_title}</b> –Ω–∞ <b>{aware_time.strftime('%d.%m.%Y %H:%M')}</b>.", 
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ (–ë–î).")
                
                del self.user_states[user_id]
                context.user_data.clear()

            except (ValueError, TypeError):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code>.", parse_mode='HTML')


        # 7. –û–ñ–ò–î–ê–ù–ò–ï ID –ö–ê–ù–ê–õ–ê –î–õ–Ø –£–°–¢–ê–ù–û–í–ö–ò –ü–†–û–ú–ü–¢–ê
        elif state == 'awaiting_prompt_channel_id':
            try:
                tg_id = int(update.message.text.strip())
                channel_info = self.db.get_channel_info(tg_id)
                
                if not channel_info:
                    await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return

                context.user_data['prompt_target_id'] = tg_id
                self.user_states[user_id] = 'awaiting_new_prompt_text'
                
                await update.message.reply_text(
                    f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª <b>{channel_info[2]}</b>.\n\n"
                    "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ **–ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é)** –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏.",
                    parse_mode='HTML'
                )

            except ValueError:
                await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

        # 8. –û–ñ–ò–î–ê–ù–ò–ï –¢–ï–ö–°–¢–ê –ü–†–û–ú–ü–¢–ê
        elif state == 'awaiting_new_prompt_text':
            tg_id = context.user_data.get('prompt_target_id')
            new_prompt = update.message.text

            if self.db.set_channel_prompt(tg_id, new_prompt):
                await update.message.reply_text(
                    f"‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è (–ø—Ä–æ–º–ø—Ç) –¥–ª—è –∫–∞–Ω–∞–ª–∞ <code>{tg_id}</code> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", 
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞.")

            del self.user_states[user_id]
            context.user_data.clear()


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()
    bot = SchedulerBot()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    job_queue = application.job_queue
    job_queue.run_repeating(bot.check_posts_job, interval=10, first=5)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("status", bot.status))
    application.add_handler(CommandHandler("time", bot.show_time))
    application.add_handler(CommandHandler("add_channel", bot.add_channel))
    application.add_handler(CommandHandler("manual_channel", bot.manual_channel))
    application.add_handler(CommandHandler("set_prompt", bot.set_prompt_command))
    application.add_handler(CommandHandler("add_admin", bot.add_admin_command))
    application.add_handler(CommandHandler("admins", bot.list_admins))
    application.add_handler(CommandHandler("channels", bot.list_channels))
    application.add_handler(CommandHandler("add_post", bot.add_post))
    application.add_handler(CommandHandler("posts", bot.list_posts))
    application.add_handler(CommandHandler("test_post", bot.test_post))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (filters.ALL –¥–ª—è —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/—Ç–µ–∫—Å—Ç–∞)
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, bot.handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()
