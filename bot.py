import logging
import sqlite3
import asyncio
import datetime
import pytz
import uuid
import httpx
import json
import traceback

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto, InputMediaVideo, BotCommand
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
)
from aiohttp import web

from config import (
    BOT_TOKEN, ADMIN_IDS,
    WEB_SERVER_PORT, MOSCOW_TZ, WEB_SERVER_BASE_URL,
    CRYPTOPAY_BOT_TOKEN, CRYPTOPAY_WEBHOOK_PATH, CRYPTOPAY_CREATE_INVOICE_URL,
    DB_NAME
)
from database import Database

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SchedulerBot:
    def __init__(self, db_name):
        self.db = Database(db_name)
        self.user_states = {}
        self.post_data = {}
        self.application = None
        self.publisher_task = None
        self.start_time = datetime.datetime.now(MOSCOW_TZ)

    def set_application(self, application):
        self.application = application

    def is_user_admin(self, user_id):
        return user_id in ADMIN_IDS

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        if not self.is_user_admin(user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
            
        self.db.add_user(user.id, user.username)
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
            "–Ø –±–æ—Ç –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ Telegram-–∫–∞–Ω–∞–ª–∞—Ö.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
        )

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
            
        help_text = (
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª.\n"
            "/my_channels - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫–∞–Ω–∞–ª—ã.\n"
            "/remove_channel - –û—Ç–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª.\n"
            "/schedule_post - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç.\n"
            "/my_posts - –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –ø–æ—Å—Ç—ã.\n"
            "/cancel_post - –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç.\n"
            "/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n"
            "/deposit - –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å."
        )
        await update.message.reply_text(help_text)

    async def add_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
            
        user_info = self.db.get_user(user_id)
        if not user_info:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
            return

        current_channels = self.db.get_user_channels(user_id)
        max_channels = user_info[6] if user_info and user_info[6] is not None else 1

        if len(current_channels) >= max_channels:
            await update.message.reply_text(f"‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤ ({max_channels}).")
            return

        await update.message.reply_text(
            "1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª —Å –ø—Ä–∞–≤–æ–º –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞."
        )
        self.user_states[user_id] = {'stage': 'awaiting_channel_forward'}

    async def my_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
            
        channels = self.db.get_user_channels(user_id)
        if not channels:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel.")
            return

        response_text = "–í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n"
        for channel_id, channel_name in channels:
            response_text += f"- **{channel_name}** (`{channel_id}`)\n"
        await update.message.reply_text(response_text, parse_mode='Markdown')

    async def remove_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
            
        channels = self.db.get_user_channels(user_id)
        if not channels:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        keyboard = [[InlineKeyboardButton(name, callback_data=f"remove_channel_{cid}")] for cid, name in channels]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

    async def schedule_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
            
        channels = self.db.get_user_channels(user_id)
        if not channels:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ /add_channel.")
            return

        keyboard = [[InlineKeyboardButton(name, callback_data=f"schedule_channel_{cid}")] for cid, name in channels]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ—Å—Ç–∞:", reply_markup=InlineKeyboardMarkup(keyboard))
        self.user_states[user_id] = {'stage': 'awaiting_post_channel_selection'}

    async def my_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
            
        posts = self.db.get_user_posts(user_id)
        if not posts:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
            return

        response_text = "–í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n"
        for post_id, channel_id, text, publish_time_str, is_published in posts:
            channel_info = self.db.get_channel_info(channel_id)
            channel_name = channel_info[3] if channel_info else f"–ö–∞–Ω–∞–ª ID: {channel_id}"
            status = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" if is_published else "‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏"

            publish_time_dt = datetime.datetime.fromisoformat(publish_time_str)
            moscow_time_str = publish_time_dt.astimezone(MOSCOW_TZ).strftime('%Y-%m-%d %H:%M:%S')

            response_text += (
                f"\n**ID:** {post_id} | **–ö–∞–Ω–∞–ª:** {channel_name}\n"
                f"**–í—Ä–µ–º—è:** {moscow_time_str} –ú–°–ö\n"
                f"**–°—Ç–∞—Ç—É—Å:** {status}\n"
                f"**–¢–µ–∫—Å—Ç:** {(text or '')[:50]}...\n"
            )
        await update.message.reply_text(response_text, parse_mode='Markdown')

    async def cancel_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
            
        pending_posts = [p for p in self.db.get_user_posts(user_id) if not p[4]]
        if not pending_posts:
            await update.message.reply_text("–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return

        keyboard = []
        for post_id, channel_id, text, publish_time_str, is_published in pending_posts:
            publish_time_dt = datetime.datetime.fromisoformat(publish_time_str)
            time_str = publish_time_dt.astimezone(MOSCOW_TZ).strftime('%H:%M')
            keyboard.append([InlineKeyboardButton(f"–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å—Ç {post_id} –Ω–∞ {time_str}", callback_data=f"cancel_post_{post_id}")])

        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è –æ—Ç–º–µ–Ω—ã:", reply_markup=InlineKeyboardMarkup(keyboard))

    async def balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
            
        balance = self.db.get_user_balance(user_id)
        await update.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: **{balance:.2f} USD**", parse_mode='Markdown')
        
    async def deposit(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
            
        await update.message.reply_text(
            "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ **USD** –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1 USD. –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ **@CryptoBot**.",
            parse_mode='Markdown'
        )
        self.user_states[update.effective_user.id] = {'stage': 'awaiting_deposit_amount'}

    async def create_cryptopay_invoice(self, user_id, amount_str: str, update: Update):
        try:
            amount = float(amount_str)
            if amount < 1.0:
                await update.message.reply_text("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - 1 USD.")
                return
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
            return

        order_id = str(uuid.uuid4())

        headers = {'Crypto-Pay-API-Token': CRYPTOPAY_BOT_TOKEN}
        payload = {
            "asset": "USDT",
            "amount": amount,
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (user_id: {user_id})",
            "external_id": order_id,
        }

        async with httpx.AsyncClient() as client:
            try:
                response = await client.post(CRYPTOPAY_CREATE_INVOICE_URL, headers=headers, json=payload)
                data = response.json()

                if response.status_code == 201 and data.get('ok'):
                    pay_url = data['result']['pay_url']
                    self.db.add_payment(user_id, amount, order_id, 'pending', pay_url, 'cryptopay')
                    keyboard = [[InlineKeyboardButton("üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=pay_url)]]
                    await update.message.reply_text(
                        f"üí∞ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç –Ω–∞ **{amount} USDT**.",
                        reply_markup=InlineKeyboardMarkup(keyboard),
                        parse_mode='Markdown'
                    )
                else:
                    logging.error(f"CryptoPay invoice error: {data}")
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç.")
            except Exception as e:
                logging.error(f"HTTP error during deposit: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.")

    async def show_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞, –≤—Ä–µ–º—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        try:
            current_time = datetime.datetime.now(MOSCOW_TZ)
            current_time_str = current_time.strftime('%d.%m.%Y %H:%M:%S')
            
            uptime = current_time - self.start_time
            hours, remainder = divmod(uptime.total_seconds(), 3600)
            minutes, seconds = divmod(remainder, 60)
            uptime_str = f"{int(hours)}—á {int(minutes)}–º {int(seconds)}—Å"
            
            channels = self.db.get_channels()
            posts = self.db.get_scheduled_posts()
            
            scheduled_count = len(posts)
            
            next_post_time = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"
            if posts:
                next_post = posts[0]
                next_time_str = next_post[5]
                next_time = datetime.datetime.strptime(next_time_str, '%Y-%m-%d %H:%M:%S')
                next_post_time = MOSCOW_TZ.localize(next_time).strftime('%d.%m.%Y %H:%M')
            
            status_message = (
                f"ü§ñ **–°–¢–ê–¢–£–° –ë–û–¢–ê**\n\n"
                f"‚è∞ **–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:** {current_time_str} (–ú–°–ö)\n"
                f"üïê **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {uptime_str}\n"
                f"üìä **–ö–∞–Ω–∞–ª–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ:** {len(channels)}\n"
                f"üìÖ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:** {scheduled_count}\n"
                f"‚è± **–ë–ª–∏–∂–∞–π—à–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è:** {next_post_time}\n"
                f"üü¢ **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω\n\n"
                f"_–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_time.strftime('%H:%M:%S')}_"
            )
            
            await update.message.reply_text(status_message, parse_mode='Markdown')
            
        except Exception as e:
            logging.error(f"Error in status command: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")

    async def list_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
            return
        
        channels = self.db.get_user_channels(user_id)
        
        if not channels:
            await update.message.reply_text("üì≠ –ö–∞–Ω–∞–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            return
        
        message = "üìã **–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:**\n\n"
        for channel in channels:
            message += f"‚Ä¢ {channel[1]} ({channel[0]})\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')
        
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id):
            return
            
        state = self.user_states.get(user_id, {}).get('stage')

        if state == 'awaiting_channel_forward':
            if update.message.forward_from_chat and update.message.forward_from_chat.type == 'channel':
                channel_id = update.message.forward_from_chat.id
                channel_name = update.message.forward_from_chat.title
                
                try:
                    member = await context.bot.get_chat_member(channel_id, context.bot.id)
                    if member.status != 'administrator' or not member.can_post_messages:
                        raise Exception("Not an admin with post rights")
                except Exception:
                    await update.message.reply_text("‚ùå –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º —Å –ø—Ä–∞–≤–æ–º –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
                    return

                if self.db.add_channel(user_id, channel_id, channel_name):
                    await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª **{channel_name}** –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode='Markdown')
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞.")
                self.user_states.pop(user_id, None)
            else:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.")

        elif state == 'awaiting_post_text':
            self.post_data.setdefault(user_id, {})['text'] = update.message.text
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ `-` (–¥–µ—Ñ–∏—Å), –µ—Å–ª–∏ –º–µ–¥–∏–∞ –Ω–µ—Ç.")
            self.user_states[user_id]['stage'] = 'awaiting_post_media'

        elif state == 'awaiting_post_media' and update.message.text == '-':
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ú–°–ö) –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`")
            self.user_states[user_id]['stage'] = 'awaiting_post_time'

        elif state == 'awaiting_post_time':
            try:
                moscow_time = MOSCOW_TZ.localize(datetime.datetime.strptime(update.message.text, '%Y-%m-%d %H:%M'))
                utc_time = moscow_time.astimezone(pytz.utc)

                if utc_time <= datetime.datetime.now(pytz.utc):
                    await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
                    return

                post_info = self.post_data.get(user_id, {})
                self.db.add_post(user_id, post_info['channel_id'], post_info.get('text'), json.dumps(post_info.get('media_ids', [])), utc_time.isoformat())
                await update.message.reply_text(f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ **{moscow_time.strftime('%Y-%m-%d %H:%M')}** –ú–°–ö!", parse_mode='Markdown')
                self.user_states.pop(user_id, None)
                self.post_data.pop(user_id, None)
            except (ValueError, KeyError):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        elif state == 'awaiting_deposit_amount':
            await self.create_cryptopay_invoice(user_id, update.message.text, update)
            self.user_states.pop(user_id, None)
            
    async def handle_media(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id):
            return
            
        if self.user_states.get(user_id, {}).get('stage') == 'awaiting_post_media':
            media_id = update.message.photo[-1].file_id if update.message.photo else update.message.video.file_id
            self.post_data.setdefault(user_id, {})['media_ids'] = [media_id]
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ú–°–ö) –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`")
            self.user_states[user_id]['stage'] = 'awaiting_post_time'

    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        user_id = query.from_user.id
        data = query.data
        await query.answer()
        
        if not self.is_user_admin(user_id):
            return

        if data.startswith('remove_channel_'):
            self.db.remove_channel(user_id, int(data.split('_')[2]))
            await query.edit_message_text("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω.")
        elif data.startswith('schedule_channel_'):
            self.post_data[user_id] = {'channel_id': int(data.split('_')[2])}
            await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞.")
            self.user_states[user_id] = {'stage': 'awaiting_post_text'}
        elif data.startswith('cancel_post_'):
            self.db.delete_post(int(data.split('_')[2]))
            await query.edit_message_text("‚úÖ –ü–æ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω.")

    async def publish_scheduled_posts(self):
        while True:
            await asyncio.sleep(60)
            posts = self.db.get_posts_to_publish()
            for post_id, user_id, channel_id, text, media_ids_str in posts:
                try:
                    media_ids = json.loads(media_ids_str or '[]')
                    message = None
                    if not media_ids:
                        message = await self.application.bot.send_message(channel_id, text, parse_mode='Markdown')
                    else:
                        message = await self.application.bot.send_photo(channel_id, media_ids[0], caption=text, parse_mode='Markdown')

                    if message:
                        self.db.set_post_published(post_id, message.message_id)
                        logging.info(f"Post {post_id} published.")
                except Exception as e:
                    logging.error(f"Error publishing post {post_id}: {traceback.format_exc()}")

async def cryptopay_webhook_handler(request):
    application = request.app['bot_app']
    bot_logic = request.app['bot_logic']
    try:
        data = await request.json()
        logging.info(f"CryptoPay Webhook received: {data}")

        if data.get('update_type') == 'invoice_paid':
            payload = data['payload']
            order_id = payload.get('external_id')
            payment_info = bot_logic.db.get_payment_by_order_id(order_id)

            if payment_info and payment_info[4] == 'pending':
                user_id, amount = payment_info[1], float(payment_info[2])
                bot_logic.db.update_payment_status(order_id, 'success')
                bot_logic.db.add_balance(user_id, amount)
                await application.bot.send_message(user_id, f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ **{amount:.2f} USD**.", parse_mode='Markdown')
                logging.info(f"User {user_id} balance updated for order {order_id}")

        return web.json_response({'status': 'ok'})
    except Exception:
        logging.error(f"Error in CryptoPay webhook: {traceback.format_exc()}")
        return web.json_response({'status': 'error'}, status=500)

async def run_bot_and_tasks(application, bot_logic):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á.
    """
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
    bot_logic.publisher_task = asyncio.create_task(bot_logic.publish_scheduled_posts())
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤
    runner = web.AppRunner(web.Application())
    runner.app['bot_app'] = application
    runner.app['bot_logic'] = bot_logic
    runner.app.router.add_post(CRYPTOPAY_WEBHOOK_PATH, cryptopay_webhook_handler)

    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', WEB_SERVER_PORT)
    await site.start()
    logging.info(f"Payment webhook server started on port {WEB_SERVER_PORT}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –±–æ—Ç–∞. –≠—Ç–∞ –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.
    await application.run_polling()

def main():
    bot_logic = SchedulerBot(DB_NAME)
    application = Application.builder().token(BOT_TOKEN).build()
    bot_logic.set_application(application)

    commands_to_register = [
        ("start", bot_logic.start),
        ("help", bot_logic.help_command),
        ("status", bot_logic.show_status),
        ("add_channel", bot_logic.add_channel),
        ("my_channels", bot_logic.my_channels),
        ("remove_channel", bot_logic.remove_channel),
        ("schedule_post", bot_logic.schedule_post),
        ("my_posts", bot_logic.my_posts),
        ("cancel_post", bot_logic.cancel_post),
        ("balance", bot_logic.balance),
        ("deposit", bot_logic.deposit)
    ]
    
    for command_name, handler_func in commands_to_register:
        application.add_handler(CommandHandler(command_name, handler_func))

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot_logic.handle_message))
    application.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, bot_logic.handle_media))
    application.add_handler(CallbackQueryHandler(bot_logic.handle_callback_query))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.
    try:
        asyncio.run(run_bot_and_tasks(application, bot_logic))
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
