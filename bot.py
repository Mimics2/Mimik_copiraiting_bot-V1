import logging
from datetime import datetime, timedelta
import pytz
import re 
import httpx 
import uuid 
import traceback

from telegram import Update, BotCommand, constants
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from config import BOT_TOKEN, ADMIN_IDS, CRYPTO_PAY_TOKEN
from database import Database

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

class SchedulerBot:
    def __init__(self):
        self.db = Database() 
        for admin_id in ADMIN_IDS:
            self.db.add_admin(admin_id, username="Initial_Config_Admin")
            
        self.start_time = datetime.now(MOSCOW_TZ)
        self.user_states = {}
        self.admin_ids = self.db.get_admin_ids()

    # --- –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê ---

    def is_user_admin(self, user_id):
        self.admin_ids = self.db.get_admin_ids()
        return user_id in self.admin_ids

    def is_user_scheduler(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–æ –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ê–¥–º–∏–Ω –ò–õ–ò –ü—Ä–µ–º–∏—É–º)."""
        return self.is_user_admin(user_id) or self.db.is_user_premium(user_id)

    # --- –§–£–ù–ö–¶–ò–ò –û–ü–õ–ê–¢–´ CRYPTOBOT PAY ---
    async def create_crypto_invoice(self, amount: float, asset: str, description: str, payload: str):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ CryptoBot Pay API."""
        try:
            url = "https://pay.crypt.bot/api/createInvoice"
            headers = {
                "Content-Type": "application/json",
                "X-Telegram-Bot-Token": CRYPTO_PAY_TOKEN
            }
            
            data = {
                "asset": asset,
                "amount": amount,
                "description": description,
                "payload": payload,
                "allow_anonymous": False,
                "expires_in": 7200 # –°—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 2 —á–∞—Å–∞
            }

            async with httpx.AsyncClient(timeout=10.0) as client:
                response = await client.post(url, headers=headers, json=data)
                response.raise_for_status()
                
                result = response.json()
                
                if result.get("ok") and result["result"]:
                    return result["result"]["pay_url"]
                else:
                    logger.error(f"CryptoPay API Error: {result}")
                    return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ CryptoPay: {e}")
            return None


    # --- –ö–û–ú–ê–ù–î–ê /buy ---
    async def buy_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.username
        
        self.db.get_or_create_user(user_id, username) 

        if self.db.is_user_premium(user_id):
            await update.message.reply_text("‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ /status.")
            return

        tariffs = {
            "30_days": {"amount": 1.0, "text": "30 –¥–Ω–µ–π ($1.00 USDT)", "days": 30},
            "90_days": {"amount": 2.5, "text": "90 –¥–Ω–µ–π ($2.50 USDT)", "days": 90},
            "180_days": {"amount": 4.5, "text": "180 –¥–Ω–µ–π ($4.50 USDT)", "days": 180},
        }
        
        message = "üëë <b>–í–´–ë–ï–†–ò–¢–ï –¢–ê–†–ò–§:</b>\n\n"
        
        for key, info in tariffs.items():
            unique_id = str(uuid.uuid4()).split('-')[0]
            payload = f"user_{user_id}_days_{info['days']}_ref_{unique_id}"
            
            pay_url = await self.create_crypto_invoice(
                amount=info["amount"],
                asset='USDT', 
                description=f"–ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –∫ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É ({info['text']})",
                payload=payload
            )
            
            if pay_url:
                message += f"‚Ä¢ <b>{info['text']}</b>: <a href='{pay_url}'>–û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot</a>\n"
            else:
                message += f"‚Ä¢ <b>{info['text']}</b>: ‚ùå (–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ)\n"
        
        self.user_states[user_id] = 'awaiting_payment_proof'
        
        message += "\n\n<b>–ü–û–°–õ–ï –û–ü–õ–ê–¢–´:</b>\n"
        message += "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ <b>–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞</b> –∏–ª–∏ <b>–•–≠–® –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (TxID)</b> –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å—é–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—ç—Ç–æ –≤—ã)."
        
        await update.message.reply_text(message, parse_mode=constants.ParseMode.HTML)


    # --- –ö–û–ú–ê–ù–î–ê /god_mode (–ù–û–í–ê–Ø: –°–ï–ö–†–ï–¢–ù–´–ô –ê–ö–¢–ò–í–ê–¢–û–† –î–õ–Ø –ê–î–ú–ò–ù–ê) ---
    async def god_mode_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.is_user_admin(user_id):
             await update.message.reply_text("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
             return
             
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ 100 –ª–µ—Ç
        days = 36500 
        new_until = self.db.activate_premium(
            user_id, 
            days, 
            username=update.effective_user.username
        )

        if new_until:
            await update.message.reply_text(
                f"üëë <b>GOD MODE –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!</b>\n"
                f"–í–∞—à –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ <b>{days} –¥–Ω–µ–π</b> (–¥–æ {new_until.strftime('%d.%m.%Y')})."
                , parse_mode=constants.ParseMode.HTML
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ GOD MODE –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


    # --- –ö–û–ú–ê–ù–î–ê /activate (–¢–û–õ–¨–ö–û –î–õ–Ø –ê–î–ú–ò–ù–û–í) ---
    async def activate_user_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): 
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

        if not context.args or len(context.args) < 2:
            await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /activate <USER_ID> <–î–ù–ò_–î–û–°–¢–£–ü–ê>")
            return
        
        try:
            target_user_id = int(context.args[0])
            days = int(context.args[1])
            
            new_until = self.db.activate_premium(
                target_user_id, 
                days, 
                username=f"ID:{target_user_id}" 
            )
            
            if new_until:
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=f"ü•≥ –í–∞—à –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ <b>{days} –¥–Ω–µ–π</b>! –î–æ—Å—Ç—É–ø–µ–Ω –¥–æ: <b>{new_until.strftime('%d.%m.%Y %H:%M')}</b> (–ú–°–ö).\n"
                         "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, /add_post)."
                    , parse_mode=constants.ParseMode.HTML
                )
                
                await update.message.reply_text(
                    f"‚úÖ –î–æ—Å—Ç—É–ø –¥–ª—è ID <b>{target_user_id}</b> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ <b>{days} –¥–Ω–µ–π</b> (–¥–æ {new_until.strftime('%d.%m.%Y %H:%M')}).",
                    parse_mode=constants.ParseMode.HTML
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏. ID –∏ –î–ù–ò –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –û—à–∏–±–∫–∞: <code>{e}</code>", parse_mode=constants.ParseMode.HTML)


    # --- –ö–û–ú–ê–ù–î–´ –°–¢–ê–¢–£–°–ê –ò –ò–ù–§–û–†–ú–ê–¶–ò–ò ---
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        username = update.effective_user.username
        
        self.db.get_or_create_user(user_id, username)
        
        is_scheduler = self.is_user_scheduler(user_id)
        is_admin = self.is_user_admin(user_id)

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–æ–∫ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ (–ò–°–•–û–î–Ø –ò–ó –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í database.py)
        premium_until_str = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
        if is_scheduler:
            user_data = self.db.get_or_create_user(user_id)
            if user_data[3]: # premium_until (–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏)
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏–º –¥–∞—Ç—É, —Ç–∞–∫ –∫–∞–∫ db.is_user_premium —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ –µ–µ –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
                try:
                    premium_until = datetime.strptime(user_data[3], '%Y-%m-%d %H:%M:%S')
                    premium_until_str = f"–¥–æ {premium_until.strftime('%d.%m.%Y')}"
                except ValueError:
                    premium_until_str = "–û—à–∏–±–∫–∞ –¥–∞—Ç—ã"
            
        
        header = f"üöÄ **{constants.DEFAULT_BOT_NAME} - –°–ò–°–¢–ï–ú–ê –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê** üöÄ\n\n"
        
        status_line = (
            f"üë§ **–í–∞—à –°—Ç–∞—Ç—É—Å:** {'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if is_admin else ('‚ú® –ü—Ä–µ–º–∏—É–º' if is_scheduler else 'üíº –û–±—ã—á–Ω—ã–π')}\n"
            f"üóì **–î–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω:** {premium_until_str}\n"
        )
        
        instruction_line = "\nüí° **–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –†–ê–ë–û–¢–ï:**\n"
        
        if is_scheduler:
             instruction_line += (
                "1. **/add_channel**: –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª (–±–æ—Ç–∞ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º —Ç–∞–º).\n"
                "2. **/add_post**: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç/–º–µ–¥–∏–∞ –∏ —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ú–°–ö).\n"
                "3. **/posts**: –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n"
             )
        else:
             instruction_line += (
                "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ **\u200B/buy** –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–∞.\n"
             )
        
        await update.message.reply_text(
            header + status_line + instruction_line,
            parse_mode=constants.ParseMode.MARKDOWN
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ (–¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –º–µ–Ω—é)
        commands = [
            BotCommand("start", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"),
            BotCommand("status", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞ –∏ –±–æ—Ç–∞"),
            BotCommand("buy", "–ö—É–ø–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É"),
        ]
        if is_scheduler:
             commands.extend([
                BotCommand("add_channel", "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"),
                BotCommand("add_post", "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç"),
                BotCommand("posts", "–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤"),
            ])
        if is_admin:
             commands.extend([
                BotCommand("activate", "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (Admin)"),
                BotCommand("god_mode", "–ê–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–µ–±—è (Admin)"),
            ])
        await context.bot.set_my_commands(commands)


    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        is_scheduler = self.is_user_scheduler(user_id)
        is_admin = self.is_user_admin(user_id)
        
        uptime = datetime.now(MOSCOW_TZ) - self.start_time
        hours, rem = divmod(uptime.total_seconds(), 3600)
        minutes, _ = divmod(rem, 60)
        
        message = (
            f"üìä **–°–ò–°–¢–ï–ú–ù–´–ô –°–¢–ê–¢–£–°** üìä\n\n"
            f"üïí **–ú–°–ö –í—Ä–µ–º—è:** {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}\n"
        )

        # –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò None)
        if is_scheduler:
            user_data = self.db.get_or_create_user(user_id)
            premium_until_str = user_data[3]
            
            if premium_until_str:
                premium_until = datetime.strptime(premium_until_str, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
                message += (
                    f"üë§ **–í–∞—à –î–æ—Å—Ç—É–ø:** ‚úÖ –ê–ö–¢–ò–í–ï–ù\n"
                    f"üóì **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** –¥–æ {premium_until} (–ú–°–ö)\n"
                )
            else:
                 message += f"üë§ **–í–∞—à –î–æ—Å—Ç—É–ø:** ‚ùå –ù–ï–ê–ö–¢–ò–í–ï–ù. (–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö). –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n"
        else:
            message += f"üë§ **–í–∞—à –î–æ—Å—Ç—É–ø:** ‚ùå –ù–ï–ê–ö–¢–ò–í–ï–ù. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n"

        
        # –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        if is_scheduler:
             channels = self.db.get_channels()
             posts = self.db.get_posts()
             
             next_post_str = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"
             if posts:
                 next_post_time_naive = datetime.strptime(posts[0][3], '%Y-%m-%d %H:%M:%S')
                 next_post_str = MOSCOW_TZ.localize(next_post_time_naive).strftime('%d.%m.%Y –≤ %H:%M')
                 
             message += (
                 f"\n--- ‚öôÔ∏è **–†–ê–ë–û–ß–ò–ï –î–ê–ù–ù–´–ï** ---\n"
                 f"‚è≥ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {int(hours)}—á {int(minutes)}–º\n"
                 f"üîó **–ö–∞–Ω–∞–ª–æ–≤:** {len(channels)}\n"
                 f"üìù **–ü–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏:** {len(posts)}\n"
                 f"üîú **–°–ª–µ–¥. –ø–æ—Å—Ç:** {next_post_str}"
             )
        
        await update.message.reply_text(message, parse_mode=constants.ParseMode.MARKDOWN)


    # --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (list_channels, add_post, handle_message –∏ —Ç.–¥.) –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
    async def add_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_scheduler(update.effective_user.id): 
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy.")
            return
        
        self.user_states[update.effective_user.id] = 'awaiting_channel_forward'
        await update.message.reply_text(
            "<b>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É:</b>\n"
            "1. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ —Å –ø—Ä–∞–≤–æ–º –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>/manual_channel</b> –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞."
            , parse_mode=constants.ParseMode.HTML
        )
        
    async def manual_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_scheduler(update.effective_user.id): 
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy.")
            return
        
        self.user_states[update.effective_user.id] = 'awaiting_channel_manual_id'
        await update.message.reply_text(
            "<b>–†–ï–ñ–ò–ú –†–£–ß–ù–û–ì–û –í–í–û–î–ê:</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>-1001234567890</code>) –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b> <code>-ID,–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</code>",
            parse_mode=constants.ParseMode.HTML
        )

    async def list_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_scheduler(update.effective_user.id): 
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy.")
            return
        
        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("–ö–∞–Ω–∞–ª—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel.")
            return
        
        message = "<b>üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        for db_id, tg_id, title, username, _, default_prompt in channels:
            prompt_status = "‚úÖ –ï—Å—Ç—å –ø—Ä–æ–º–ø—Ç" if default_prompt else "‚ùå –ù–µ—Ç –ø—Ä–æ–º–ø—Ç–∞"
            message += f"‚Ä¢ {title} ({prompt_status})\n"
            message += f"  (ID: <code>{tg_id}</code>, –í–Ω—É—Ç—Ä. ID: <code>{db_id}</code>)\n"
        await update.message.reply_text(message, parse_mode=constants.ParseMode.HTML)


    async def add_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_scheduler(update.effective_user.id): 
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy.")
            return
        
        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é /add_channel.")
            return

        message = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        for db_id, _, title, _, _, _ in channels:
            message += f"‚Ä¢ <b>{title}</b> (–í–Ω—É—Ç—Ä. ID: <code>{db_id}</code>)\n"
        
        message += "\n–í–≤–µ–¥–∏—Ç–µ **–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID** –∫–∞–Ω–∞–ª–∞ (—á–∏—Å–ª–æ –≤ —Å–∫–æ–±–∫–∞—Ö)."
        
        self.user_states[update.effective_user.id] = 'awaiting_target_channel_id'
        await update.message.reply_text(message, parse_mode=constants.ParseMode.HTML)


    async def list_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_scheduler(update.effective_user.id): 
            await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy.")
            return
        
        posts = self.db.get_posts()
        if not posts:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
            return

        message = "<b>üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã (–ø–æ –ú–°–ö):</b>\n\n"
        for post in posts:
            post_id, _, message_text, scheduled_time_str, _, _, _, media_type, channel_title, _ = post
            post_time_naive = datetime.strptime(scheduled_time_str, '%Y-%m-%d %H:%M:%S')
            time_formatted = MOSCOW_TZ.localize(post_time_naive).strftime('%d.%m.%Y %H:%M')
            
            media_info = f" ({media_type.upper()})" if media_type else ""
            
            text_snippet = message_text[:40].replace('\n', ' ') + ('...' if len(message_text) > 40 else '')
            message += f"‚Ä¢ <b>{time_formatted}</b>{media_info} –≤ '{channel_title}'\n"
            message += f"  <i>–¢–µ–∫—Å—Ç: {text_snippet}</i>\n"
        await update.message.reply_text(message, parse_mode=constants.ParseMode.HTML)
        
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in self.user_states: return

        state = self.user_states[user_id]
        
        # 9. –û–ñ–ò–î–ê–ù–ò–ï –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê –û–ü–õ–ê–¢–´ (/buy)
        if state == 'awaiting_payment_proof':
            proof_text = update.message.text.strip()
            username = update.effective_user.username
            
            for admin_id in self.admin_ids:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üö® –ù–û–í–´–ô –ó–ê–ü–†–û–° –ù–ê –û–ü–õ–ê–¢–£\n"
                         f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'} (ID: <code>{user_id}</code>)\n"
                         f"–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –•–≠–®/–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: <b>{proof_text}</b>\n"
                         f"<b>--- –î–ï–ô–°–¢–í–ò–Ø –ê–î–ú–ò–ù–ê ---</b>\n"
                         f"1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞—Ç–µ–∂ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ CryptoBot Pay (–∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω).\n"
                         f"2. –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫–æ–º–∞–Ω–¥–æ–π:\n"
                         f"<code>/activate {user_id} 30</code> (–∏–ª–∏ 90, 180 –¥–Ω–µ–π)",
                    parse_mode=constants.ParseMode.HTML
                )
                
            await update.message.reply_text("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ (—ç—Ç–æ –∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è).")
            
            del self.user_states[user_id]
            context.user_data.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º (1-8)
        if not self.is_user_scheduler(user_id) and state not in ('awaiting_new_admin_id', 'awaiting_prompt_channel_id', 'awaiting_new_prompt_text'):
             await update.message.reply_text("‚ùå –î–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ü—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy.")
             del self.user_states[user_id]
             context.user_data.clear()
             return
        
        # ... (–ª–æ–≥–∏–∫–∞ –±–ª–æ–∫–æ–≤ 1-8: –û–°–¢–ê–í–õ–Ø–ï–ú –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
        
        # 1. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–ò–í–Ø–ó–ö–ê (/add_channel)
        if state == 'awaiting_channel_forward':
            if update.message.forward_from_chat:
                channel_id = update.message.forward_from_chat.id
                title = update.message.forward_from_chat.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                username = update.message.forward_from_chat.username

                if self.db.add_channel(channel_id, title, username):
                    await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª <b>'{title}'</b> –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode=constants.ParseMode.HTML)
                else:
                    await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ë–î.")
            else:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
            del self.user_states[user_id]
            
        # 2. –†–£–ß–ù–ê–Ø –ü–†–ò–í–Ø–ó–ö–ê (/manual_channel)
        elif state == 'awaiting_channel_manual_id':
            try:
                parts = update.message.text.split(',', 1)
                if len(parts) != 2: raise ValueError
                
                channel_id = int(parts[0].strip())
                title = parts[1].strip()
                username = None # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –±–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞

                if self.db.add_channel(channel_id, title, username):
                    await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª <b>'{title}'</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", parse_mode=constants.ParseMode.HTML)
                else:
                    await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª —É–∂–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ë–î.")
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>-ID,–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</code>", parse_mode=constants.ParseMode.HTML)
            del self.user_states[user_id]
            
        # 3. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–û–ì–û –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê (/add_admin)
        elif state == 'awaiting_new_admin_id':
            if not self.is_user_admin(user_id): return
            try:
                new_admin_id = int(update.message.text.strip())
                if self.db.add_admin(new_admin_id):
                    self.admin_ids = self.db.get_admin_ids() # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
                    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <b>{new_admin_id}</b> –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!", parse_mode=constants.ParseMode.HTML)
                else:
                    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            except ValueError:
                await update.message.reply_text("‚ùå ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            del self.user_states[user_id]

        # 4. –û–ñ–ò–î–ê–ù–ò–ï –í–´–ë–û–†–ê –ö–ê–ù–ê–õ–ê –î–õ–Ø –ü–û–°–¢–ê (/add_post)
        elif state == 'awaiting_target_channel_id':
            try:
                channel_db_id = int(update.message.text.strip())
                channel_info = self.db.get_channel_info_by_db_id(channel_db_id)
                
                if channel_info:
                    context.user_data['target_channel_id'] = channel_db_id
                    context.user_data['target_channel_title'] = channel_info[2]
                    self.user_states[user_id] = 'awaiting_post_text'
                    await update.message.reply_text(f"‚úÖ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª <b>'{channel_info[2]}'</b>.\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ **—Ç–µ–∫—Å—Ç** (–∏/–∏–ª–∏ **—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ**) –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", parse_mode=constants.ParseMode.HTML)
                else:
                    await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except ValueError:
                await update.message.reply_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        
        # 5. –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–ö–°–¢–ê / –ú–ï–î–ò–ê –ü–û–°–¢–ê (–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ /add_post)
        elif state == 'awaiting_post_text': 
            text = update.message.caption or update.message.text or ""
            media_file_id = None
            media_type = None

            if update.message.photo:
                media_file_id = update.message.photo[-1].file_id # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
                media_type = 'photo'
            elif update.message.video:
                media_file_id = update.message.video.file_id
                media_type = 'video'

            if not text and not media_file_id:
                await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª.")
                return

            context.user_data['post_text'] = text
            context.user_data['media_file_id'] = media_file_id
            context.user_data['media_type'] = media_type

            self.user_states[user_id] = 'awaiting_post_time'
            await update.message.reply_text(
                "‚úÖ –¢–µ–∫—Å—Ç/–ú–µ–¥–∏–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ **–≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏** –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code> (–í—Ä–µ–º—è –ø–æ –ú–°–ö).", 
                parse_mode=constants.ParseMode.HTML
            )

        # 6. –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ü–û–°–¢–ê
        elif state == 'awaiting_post_time':
            time_str = update.message.text.strip()
            try:
                scheduled_time_naive = datetime.strptime(time_str, '%d.%m.%Y %H:%M')
                scheduled_time_moscow = MOSCOW_TZ.localize(scheduled_time_naive)
                
                if scheduled_time_moscow < datetime.now(MOSCOW_TZ) + timedelta(minutes=1):
                    await update.message.reply_text("‚ùå –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.")
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –ë–î
                post_id = self.db.add_post(
                    context.user_data['target_channel_id'],
                    context.user_data['post_text'],
                    scheduled_time_moscow.strftime('%Y-%m-%d %H:%M:%S'),
                    context.user_data.get('media_file_id'),
                    context.user_data.get('media_type')
                )

                if post_id:
                    await update.message.reply_text(
                        f"üéâ **–ü–û–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù!**\n\n"
                        f"–ö–∞–Ω–∞–ª: <b>{context.user_data['target_channel_title']}</b>\n"
                        f"–í—Ä–µ–º—è (–ú–°–ö): <b>{time_str}</b>\n"
                        f"–¢–µ–∫—Å—Ç: {context.user_data['post_text'][:50]}...",
                        parse_mode=constants.ParseMode.HTML
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú</code>", parse_mode=constants.ParseMode.HTML)
                return
            
            del self.user_states[user_id]
            context.user_data.clear()
            
        # 7. –û–ñ–ò–î–ê–ù–ò–ï ID –ö–ê–ù–ê–õ–ê –î–õ–Ø –£–°–¢–ê–ù–û–í–ö–ò –ü–†–û–ú–ü–¢–ê
        elif state == 'awaiting_prompt_channel_id':
            if not self.is_user_admin(user_id): return
            try:
                channel_db_id = int(update.message.text.strip())
                channel_info = self.db.get_channel_info_by_db_id(channel_db_id)

                if channel_info:
                    context.user_data['prompt_target_channel_id'] = channel_info[1] # TG ID
                    context.user_data['prompt_target_channel_title'] = channel_info[2]
                    self.user_states[user_id] = 'awaiting_new_prompt_text'
                    await update.message.reply_text(f"‚úÖ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª <b>'{channel_info[2]}'</b>. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞.", parse_mode=constants.ParseMode.HTML)
                else:
                    await update.message.reply_text("‚ùå –ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            except ValueError:
                await update.message.reply_text("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        
        # 8. –û–ñ–ò–î–ê–ù–ò–ï –¢–ï–ö–°–¢–ê –ü–†–û–ú–ü–¢–ê
        elif state == 'awaiting_new_prompt_text':
            if not self.is_user_admin(user_id): return
            new_prompt = update.message.text
            tg_channel_id = context.user_data['prompt_target_channel_id']
            channel_title = context.user_data['prompt_target_channel_title']

            if self.db.set_channel_prompt(tg_channel_id, new_prompt):
                await update.message.reply_text(f"‚úÖ –î–ª—è –∫–∞–Ω–∞–ª–∞ <b>'{channel_title}'</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç:\n\n<code>{new_prompt}</code>", parse_mode=constants.ParseMode.HTML)
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –≤ –ë–î.")

            del self.user_states[user_id]
            context.user_data.clear()


    # --- –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ê ---
    async def show_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(f"–¢–µ–∫—É—â–µ–µ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: **{datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}**", parse_mode=constants.ParseMode.MARKDOWN)

    async def add_admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): return
        self.user_states[update.effective_user.id] = 'awaiting_new_admin_id'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")

    async def list_admins(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): return
        admins = self.db.get_admins()
        message = "<b>üëë –°–ø–∏—Å–æ–∫ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n\n"
        for _, user_id, username, _ in admins:
            message += f"‚Ä¢ <code>{user_id}</code> (@{username or '–ù–µ—Ç –∏–º–µ–Ω–∏'})\n"
        await update.message.reply_text(message, parse_mode=constants.ParseMode.HTML)

    async def set_prompt_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): return
        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é /add_channel.")
            return

        message = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ (–¥–ª—è –ò–ò):</b>\n\n"
        for db_id, _, title, _, _, _ in channels:
            message += f"‚Ä¢ <b>{title}</b> (–í–Ω—É—Ç—Ä. ID: <code>{db_id}</code>)\n"
        
        message += "\n–í–≤–µ–¥–∏—Ç–µ **–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID** –∫–∞–Ω–∞–ª–∞."
        self.user_states[update.effective_user.id] = 'awaiting_prompt_channel_id'
        await update.message.reply_text(message, parse_mode=constants.ParseMode.HTML)

    async def test_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_user_admin(update.effective_user.id): return
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞...
        await update.message.reply_text("–¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 5 –º–∏–Ω—É—Ç –≤–ø–µ—Ä–µ–¥.")
        

    # --- –°–ò–°–¢–ï–ú–ù–´–ï –ó–ê–î–ê–ß–ò ---
    async def check_posts_job(self, context: ContextTypes.DEFAULT_TYPE):
        try:
            posts = self.db.get_posts()
            current_time = datetime.now(MOSCOW_TZ)
            
            for post in posts:
                post_id, _, message_text, scheduled_time_str, _, _, media_file_id, media_type, _, tg_channel_id = post
                
                scheduled_time_naive = datetime.strptime(scheduled_time_str, '%Y-%m-%d %H:%M:%S')
                scheduled_time_moscow = MOSCOW_TZ.localize(scheduled_time_naive)
                
                if scheduled_time_moscow <= current_time:
                    try:
                        await self.publish_post(post_id, tg_channel_id, message_text, media_file_id, media_type, context)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ ID {post_id}: {e}")
                        self.db.update_post_status(post_id, 'failed')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")

    async def publish_post(self, post_id, tg_channel_id, message_text, media_file_id, media_type, context: ContextTypes.DEFAULT_TYPE):
        if media_file_id:
            if media_type == 'photo':
                await context.bot.send_photo(
                    chat_id=tg_channel_id, 
                    photo=media_file_id, 
                    caption=message_text,
                    parse_mode=constants.ParseMode.HTML # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                )
            elif media_type == 'video':
                await context.bot.send_video(
                    chat_id=tg_channel_id, 
                    video=media_file_id, 
                    caption=message_text,
                    parse_mode=constants.ParseMode.HTML
                )
            else:
                # –ï—Å–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª –µ—Å—Ç—å, –Ω–æ —Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await context.bot.send_message(
                    chat_id=tg_channel_id, 
                    text=message_text,
                    parse_mode=constants.ParseMode.HTML
                )
        else:
            await context.bot.send_message(
                chat_id=tg_channel_id, 
                text=message_text,
                parse_mode=constants.ParseMode.HTML
            )
        
        self.db.update_post_status(post_id, 'published')
        logger.info(f"–ü–æ—Å—Ç ID {post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ {tg_channel_id}.")

# –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏."""
    logger.error("–ü—Ä–æ–∏–∑–æ—à–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: %s", context.error)
    # –ü–µ—á–∞—Ç–∞–µ–º —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    tb_list = traceback.format_exception(None, context.error, context.error.__traceback__)
    tb_string = ''.join(tb_list)
    logger.error("Traceback:\n%s", tb_string)

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
    if update:
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        error_message = f"üö® –í–ê–ñ–ù–û: –í –±–æ—Ç–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID `{user_id}`. –°–º. –ª–æ–≥–∏ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
        try:
             await context.bot.send_message(chat_id=chat_id, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        except:
             pass # –ù–µ —É–ø–∞—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()
    bot = SchedulerBot()

    job_queue = application.job_queue
    job_queue.run_repeating(bot.check_posts_job, interval=10, first=5)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("status", bot.status))
    application.add_handler(CommandHandler("time", bot.show_time))
    
    # –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ (–û–ø–ª–∞—Ç–∞ –∏ –ê–∫—Ç–∏–≤–∞—Ü–∏—è)
    application.add_handler(CommandHandler("buy", bot.buy_command))
    application.add_handler(CommandHandler("activate", bot.activate_user_command)) 
    application.add_handler(CommandHandler("god_mode", bot.god_mode_command)) # –°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞

    
    # –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è Premium/Admin
    application.add_handler(CommandHandler("add_channel", bot.add_channel))
    application.add_handler(CommandHandler("manual_channel", bot.manual_channel))
    application.add_handler(CommandHandler("set_prompt", bot.set_prompt_command))
    application.add_handler(CommandHandler("channels", bot.list_channels))
    application.add_handler(CommandHandler("add_post", bot.add_post))
    application.add_handler(CommandHandler("posts", bot.list_posts))
    
    # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è Admin
    application.add_handler(CommandHandler("add_admin", bot.add_admin_command))
    application.add_handler(CommandHandler("admins", bot.list_admins))
    application.add_handler(CommandHandler("test_post", bot.test_post))

    
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, bot.handle_message))

    # –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –û–®–ò–ë–û–ö
    application.add_error_handler(error_handler)

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()
