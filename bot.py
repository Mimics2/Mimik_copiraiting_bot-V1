# bot (1) (4).py

import logging
from datetime import datetime, timedelta
import pytz
import re 
import httpx # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import uuid 
import traceback
import os
import json
import asyncio

from telegram import Update, BotCommand, constants, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackContext
from aiohttp import web 

from config import (BOT_TOKEN, ADMIN_IDS, CRYPTO_CLOUD_API_KEY, 
                    CRYPTO_CLOUD_CREATE_URL, CRYPTO_CLOUD_WEBHOOK_SECRET, 
                    WEB_SERVER_PORT, WEBHOOK_PATH, MOSCOW_TZ, WEB_SERVER_BASE_URL)
from database import Database

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –ë–æ—Ç–∞ ---

class SchedulerBot:
    def __init__(self):
        self.db = Database() 
        # –î–æ–±–∞–≤–ª—è–µ–º ADMIN_IDS –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        for admin_id in ADMIN_IDS:
            self.db.add_admin(admin_id, username="Initial_Config_Admin")
            
        self.start_time = datetime.now(MOSCOW_TZ)
        self.user_states = {}
        self.admin_ids = self.db.get_admin_ids()

    # --- –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ê ---

    def is_user_admin(self, user_id):
        self.admin_ids = self.db.get_admin_ids()
        return user_id in self.admin_ids

    def is_user_scheduler(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–æ –Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–ê–¥–º–∏–Ω –ò–õ–ò –ü—Ä–µ–º–∏—É–º)."""
        return self.is_user_admin(user_id) or self.db.is_user_premium(user_id)

    # --- –°–ï–†–í–ò–°–ù–´–ï –ö–û–ú–ê–ù–î–´ ---

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        if not self.is_user_scheduler(user_id):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ—Å—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
            return
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("status", "–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ –≤—Ä–µ–º—è"),
            BotCommand("buy", "–ö—É–ø–∏—Ç—å Premium-–¥–æ—Å—Ç—É–ø"),
            BotCommand("add_channel", "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"),
            BotCommand("channels", "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"),
            BotCommand("add_post", "–î–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é"),
            BotCommand("posts", "–°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π"),
        ]
        
        await context.bot.set_my_commands(commands)
        
        current_time_str = datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')
        
        await update.message.reply_text(
            f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö): {current_time_str}\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º." 
        )
        
    # --- –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ö–û–ú–ê–ù–î –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê (–¥–æ–±–∞–≤—å –∑–¥–µ—Å—å —Å–≤–æ—é –ª–æ–≥–∏–∫—É) ---
    async def show_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è /status –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    async def add_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è /add_channel –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    async def list_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è /channels –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    async def add_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è /add_post –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

    async def list_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è /posts –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–æ—Å—Ç–æ—è–Ω–∏–π
        pass
    
    # --- –ö–û–ú–ê–ù–î–ê: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
    
    async def add_admin_secret_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ ID. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin 123456"""
        user_id = update.effective_user.id

        if not self.is_user_admin(user_id):
            await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            new_admin_id = int(context.args[0])
            
            # –ü–æ–ª—É—á–∞–µ–º username
            new_admin_username = context.args[1] if len(context.args) > 1 else (update.message.reply_to_message.from_user.username if update.message.reply_to_message and update.message.reply_to_message.from_user else "Unknown")

            if self.db.add_admin(new_admin_id, new_admin_username):
                self.admin_ids = self.db.get_admin_ids()
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID **{new_admin_id}** ({new_admin_username}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.", 
                    parse_mode=constants.ParseMode.MARKDOWN
                )
                
                await context.bot.send_message(new_admin_id, 
                                               "üéâ –í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞!")
            else:
                await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

        except (IndexError, ValueError):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/addadmin [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [Username (–æ–ø—Ü.)]`",
                parse_mode=constants.ParseMode.MARKDOWN
            )

    # --- –õ–û–ì–ò–ö–ê CRYPTOCLOUD ---
    
    def create_payment_invoice(self, amount: float, user_id: int):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ CryptoCloud –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—á–µ—Ç–∞.
        """
        order_id = str(uuid.uuid4())
        
        headers = {
            "Authorization": f"Token {CRYPTO_CLOUD_API_KEY}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "amount": amount, 
            "currency": "USD", 
            "order_id": order_id, 
            "metadata": {"telegram_user_id": user_id}, 
            "success_url": f"{WEB_SERVER_BASE_URL}" 
        }
        
        try:
            with httpx.Client() as client:
                response = client.post(CRYPTO_CLOUD_CREATE_URL, headers=headers, json=payload)
                response.raise_for_status() 
            
            result = response.json()
            
            if result.get('status') == 'success':
                self.db.add_order(order_id, user_id, amount)
                return result['result']['url'], order_id
            else:
                logger.error(f"CryptoCloud API error: {result.get('message')}")
                return None, None
                
        except httpx.RequestError as e:
            logger.error(f"Request error to CryptoCloud: {e}")
            return None, None

    async def buy_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        price = 5.00 # $5 –∑–∞ Premium
        
        link, order_id = self.create_payment_invoice(price, user_id)
        
        if link:
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton(f"–û–ø–ª–∞—Ç–∏—Ç—å ${price:.2f} (30 –¥–Ω–µ–π)", url=link)]])
            await update.message.answer(
                f"üí∞ –°–æ–∑–¥–∞–Ω —Å—á–µ—Ç ‚Ññ{order_id}.\nPremium-–¥–æ—Å—Ç—É–ø –Ω–∞ 30 –¥–Ω–µ–π. –ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–∞.",
                reply_markup=keyboard,
                parse_mode=constants.ParseMode.MARKDOWN
            )
        else:
            await update.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- WebHook –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø CRYPTOCLOUD (HTTP-—Å–µ—Ä–≤–µ—Ä) ---

async def cryptocloud_webhook_handler(request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç CryptoCloud.
    """
    application = request.app['bot_app']
    db_instance = application.bot_data['db']
    bot_instance = application.bot

    try:
        data = await request.json()
    except json.JSONDecodeError:
        return web.json_response({'status': 'error', 'message': 'Invalid JSON'}, status=400)

    # 1. –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
    security_key = data.get('security')
    if security_key != CRYPTO_CLOUD_WEBHOOK_SECRET:
        logger.warning(f"–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ WebHook. –ü–æ–ª—É—á–µ–Ω –∫–ª—é—á: {security_key}")
        return web.json_response({'status': 'error', 'message': 'Invalid security key'}, status=403)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    status = data.get('status')
    order_id = data.get('invoice_id')
    user_id_str = data.get('metadata', {}).get('telegram_user_id')
    
    if status == 'paid' and user_id_str:
        user_id = int(user_id_str)
        
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –ë–î –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        db_instance.update_order_status(order_id, 'paid')
        end_date = db_instance.add_or_update_premium_user(user_id, days=30)
        
        logging.info(f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞. Order ID: {order_id}, User ID: {user_id}. PREMIUM –ê–ö–¢–ò–í–ò–†–û–í–ê–ù.")

        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        if user_id and end_date:
            try:
                end_date_str = end_date.strftime('%d.%m.%Y')
                await bot_instance.send_message(user_id, 
                                                f"üéâ –í–∞—à–∞ Premium-–ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ **{end_date_str}**! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É.",
                                                parse_mode=constants.ParseMode.MARKDOWN)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        return web.json_response({'status': 'ok'})
        
    elif status in ['fail', 'error']:
        logger.warning(f"‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –∏–ª–∏ –æ—à–∏–±–∫–∞. Order ID: {order_id}")
        return web.json_response({'status': 'ok'}) 
        
    return web.json_response({'status': 'ok'})


# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê –ù–ê RAILWAY –ß–ï–†–ï–ó AIOHTTP ---

def main():
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    bot_logic = SchedulerBot()
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application.bot_data['db'] = bot_logic.db 
    application.bot_data['config'] = __import__('config') 
    
    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ ---
    application.add_handler(CommandHandler("start", bot_logic.start))
    application.add_handler(CommandHandler("buy", bot_logic.buy_command))
    application.add_handler(CommandHandler("addadmin", bot_logic.add_admin_secret_command)) 
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    application.add_handler(CommandHandler("status", bot_logic.show_status)) 
    application.add_handler(CommandHandler("add_channel", bot_logic.add_channel))
    application.add_handler(CommandHandler("channels", bot_logic.list_channels))
    application.add_handler(CommandHandler("add_post", bot_logic.add_post))
    application.add_handler(CommandHandler("posts", bot_logic.list_posts))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, bot_logic.handle_message))


    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    async def start_webhook_server():
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebHook –¥–ª—è Telegram
        await application.bot.set_webhook(url=f"{WEB_SERVER_BASE_URL}/{BOT_TOKEN}")
        
        # –°–æ–∑–¥–∞–µ–º AIOHTTP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = web.Application()
        app['bot_app'] = application
        
        # 1. WebHook –¥–ª—è Telegram (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å)
        app.router.add_post(f"/{BOT_TOKEN}", application.update_queue.put) 
        
        # 2. WebHook –¥–ª—è CryptoCloud (–∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—É—Ç—å)
        app.router.add_post(WEBHOOK_PATH, cryptocloud_webhook_handler)

        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram Application, —á—Ç–æ–±—ã –æ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        await application.initialize()
        await application.start()
        
        # –ó–∞–ø—É—Å–∫ AIOHTTP —Å–µ—Ä–≤–µ—Ä–∞
        runner = web.AppRunner(app)
        await runner.setup()
        site = web.TCPSite(runner, '0.0.0.0', WEB_SERVER_PORT)
        
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ WebHook-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {WEB_SERVER_PORT}")
        await site.start()
        
        # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        await application.run_until_shutdown()

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ
        asyncio.run(start_webhook_server())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        

if __name__ == '__main__':
    main()
