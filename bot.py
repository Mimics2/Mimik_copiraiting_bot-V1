import logging
from datetime import datetime
import pytz
import re 
from telegram import Update, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- –ü–†–ï–î–ü–û–õ–ê–ì–ê–ï–ú, –ß–¢–û –≠–¢–ò –§–ê–ô–õ–´ (config, database) –°–£–©–ï–°–¢–í–£–Æ–¢ ---
# from config import BOT_TOKEN, ADMIN_IDS
# from database import Database

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∫–æ–¥–∞ –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤:
BOT_TOKEN = "YOUR_BOT_TOKEN"
ADMIN_IDS = [123456789] # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
class Database:
    def __init__(self):
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: id, tg_channel_id, title, username, added_date
        self.channels = {
            1: (1, -1001234567890, "–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ PRO", "copy_pro", datetime.now()),
            2: (2, -1001987654321, "–õ–∏—á–Ω—ã–π –ë–ª–æ–≥", "my_personal_blog", datetime.now())
        }
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: post_id, channel_db_id, message_text, scheduled_time_str, status, created_date, channel_title, tg_channel_id
        self.posts = []

    def get_channels(self):
        return list(self.channels.values())
    
    def get_channel_by_db_id(self, db_id):
        return self.channels.get(db_id)

    def add_channel(self, tg_channel_id, title, username):
        if not any(c[1] == tg_channel_id for c in self.channels.values()):
            new_id = max(self.channels.keys()) + 1 if self.channels else 1
            self.channels[new_id] = (new_id, tg_channel_id, title, username, datetime.now())
            return True
        return False

    def get_posts(self):
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —Ç—É—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±–æ—Ä–∫–∞ –∏–∑ –ë–î
        return [p for p in self.posts if p[4] != 'published']

    def add_post(self, channel_db_id, message_text, scheduled_time_str):
        post_id = len(self.posts) + 1
        channel = self.get_channel_by_db_id(channel_db_id)
        if not channel: return False
        
        _, tg_channel_id, channel_title, _, _ = channel
        
        self.posts.append((
            post_id, 
            channel_db_id, 
            message_text, 
            scheduled_time_str, 
            'pending', 
            datetime.now(), 
            channel_title, 
            tg_channel_id
        ))
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è get_posts
        self.posts.sort(key=lambda x: datetime.strptime(x[3], '%Y-%m-%d %H:%M:%S'))
        return True

    def update_post_status(self, post_id, status):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –ë–î
        pass 
# -------------------------------------------------------------------


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –ú–æ—Å–∫–≤—É –∫–∞–∫ —ç—Ç–∞–ª–æ–Ω –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

class SchedulerBot:
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ self.db = Database()
        self.db = Database() 
        self.start_time = datetime.now(MOSCOW_TZ)
        self.user_states = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # --- –§–£–ù–ö–¶–ò–ò –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø ---
    async def check_posts_job(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        try:
            posts = self.db.get_posts()
            current_time = datetime.now(MOSCOW_TZ)

            for post in posts:
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: post_id, channel_db_id, message_text, scheduled_time_str, status, created_date, channel_title, tg_channel_id
                post_id, _, message_text, scheduled_time_str, _, _, _, tg_channel_id = post
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
                post_time_naive = datetime.strptime(scheduled_time_str, '%Y-%m-%d %H:%M:%S')
                post_time_aware = MOSCOW_TZ.localize(post_time_naive)

                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç–∞–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
                if post_time_aware <= current_time:
                    logger.info(f"–ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç {post_id} –≤ –∫–∞–Ω–∞–ª {tg_channel_id}")
                    await self.publish_post(post_id, tg_channel_id, message_text, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")

    async def publish_post(self, post_id, channel_id, message_text, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞."""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –∫–∞–Ω–∞–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è chat_id (—ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è API)
            await context.bot.send_message(chat_id=str(channel_id), text=message_text, parse_mode='HTML')
            self.db.update_post_status(post_id, 'published')
            logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {channel_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id} –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")
            self.db.update_post_status(post_id, 'error')


    # --- –§–£–ù–ö–¶–ò–ò –í–†–ï–ú–ï–ù–ò –ò –°–¢–ê–¢–£–°–ê ---
    async def show_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ (–ú–°–ö)."""
        if update.effective_user.id not in ADMIN_IDS: return
        current_time = datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ú–æ—Å–∫–≤–µ (–ú–°–ö): \n<b>{current_time}</b>",
            parse_mode='HTML'
        )

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in ADMIN_IDS: return

        uptime = datetime.now(MOSCOW_TZ) - self.start_time
        hours, rem = divmod(uptime.total_seconds(), 3600)
        minutes, _ = divmod(rem, 60)
        
        channels = self.db.get_channels()
        posts = self.db.get_posts()
        
        next_post_str = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"
        if posts:
            next_post_time_naive = datetime.strptime(posts[0][3], '%Y-%m-%d %H:%M:%S')
            next_post_str = MOSCOW_TZ.localize(next_post_time_naive).strftime('%d.%m.%Y –≤ %H:%M')

        message = (
            f"<b>ü§ñ –°–¢–ê–¢–£–° –ë–û–¢–ê</b>\n\n"
            f"<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {int(hours)}—á {int(minutes)}–º\n"
            f"<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤:</b> {len(channels)}\n"
            f"<b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤:</b> {len(posts)}\n"
            f"<b>–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç:</b> {next_post_str}\n"
            f"<b>–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:</b> {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}"
        )
        await update.message.reply_text(message, parse_mode='HTML')


    # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        commands = [
            BotCommand("status", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
            BotCommand("time", "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–°–ö)"),
            BotCommand("add_channel", "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª"),
            BotCommand("channels", "–°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"),
            BotCommand("add_post", "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç"),
            BotCommand("posts", "–°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"),
            BotCommand("test_post", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –ø–µ—Ä–≤–æ–º –∫–∞–Ω–∞–ª–µ"),
            BotCommand("manual_channel", "–†—É—á–Ω–æ–π –≤–≤–æ–¥ ID –∫–∞–Ω–∞–ª–∞")
        ]
        await context.bot.set_my_commands(commands)


        await update.message.reply_text(
            "<b>ü§ñ –ë–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏.\n\n"
            "/add_channel - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª (—á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É)\n"
            "/manual_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤—Ä—É—á–Ω—É—é –ø–æ ID\n"
            "/test_post - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞—é—Ç –ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            parse_mode='HTML'
        )

    async def add_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in ADMIN_IDS: return
        self.user_states[update.effective_user.id] = 'awaiting_channel_forward'
        await update.message.reply_text(
            "<b>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É:</b>\n"
            "1. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ —Å –ø—Ä–∞–≤–æ–º –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.\n\n"
            "–ï—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç (–∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π), –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>/manual_channel</b>."
            , parse_mode='HTML'
        )
    
    async def manual_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞."""
        if update.effective_user.id not in ADMIN_IDS: return
        self.user_states[update.effective_user.id] = 'awaiting_channel_manual_id'
        await update.message.reply_text(
            "<b>–†–ï–ñ–ò–ú –†–£–ß–ù–û–ì–û –í–í–û–î–ê:</b>\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–∞–Ω–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>-1001234567890</code>) –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.\n\n"
            "<b>–§–æ—Ä–º–∞—Ç:</b> <code>-ID,–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</code>\n"
            "<i>(–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–≤–µ—Ä—Å–∏—é Telegram, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID, –µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)</i>",
            parse_mode='HTML'
        )

    async def list_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in ADMIN_IDS: return
        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("–ö–∞–Ω–∞–ª—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel –∏–ª–∏ /manual_channel.")
            return
        
        message = "<b>üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ channel: id, channel_id (TG ID), title, username, added_date
        for _, tg_id, title, username, _ in channels:
            message += f"‚Ä¢ {title}\n  (ID: <code>{tg_id}</code>, {f'@{username}' if username else '–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞'})\n"
        await update.message.reply_text(message, parse_mode='HTML')

    async def add_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –≤–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞."""
        if update.effective_user.id not in ADMIN_IDS: return
        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é /add_channel –∏–ª–∏ /manual_channel.")
            return

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –í—ã–≤–æ–¥–∏–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ ---
        message = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–∏–≤ –µ–≥–æ –Ω–æ–º–µ—Ä:</b>\n\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        context.user_data['available_channels'] = {} 
        
        for i, channel in enumerate(channels, 1):
            db_id, _, title, _, _ = channel
            message += f"<b>{i}.</b> {title}\n"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–Ω–∞–ª–∞ –≤ –ë–î
            context.user_data['available_channels'][str(i)] = db_id 
        
        self.user_states[update.effective_user.id] = 'awaiting_channel_choice'
        await update.message.reply_text(message, parse_mode='HTML')

    async def list_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in ADMIN_IDS: return
        posts = self.db.get_posts()
        if not posts:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
            return

        message = "<b>üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã (–ø–æ –ú–°–ö):</b>\n\n"
        for post in posts:
            _, _, message_text, scheduled_time_str, _, _, channel_title, _ = post
            post_time_naive = datetime.strptime(scheduled_time_str, '%Y-%m-%d %H:%M:%S')
            time_formatted = MOSCOW_TZ.localize(post_time_naive).strftime('%d.%m.%Y %H:%M')
            text_snippet = message_text[:40].replace('\n', ' ') + ('...' if len(message_text) > 40 else '')
            message += f"‚Ä¢ <b>{time_formatted}</b> –≤ '{channel_title}'\n"
            message += f"  <i>–¢–µ–∫—Å—Ç: {text_snippet}</i>\n"
        await update.message.reply_text(message, parse_mode='HTML')

    async def test_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –±–æ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ –ø–µ—Ä–≤–æ–º –∫–∞–Ω–∞–ª–µ."""
        if update.effective_user.id not in ADMIN_IDS: return

        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª –ø–µ—Ä–≤—ã–º.")
            return
            
        tg_channel_id = channels[0][1] # TG ID –∫–∞–Ω–∞–ª–∞
        channel_title = channels[0][2]
        test_message = f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞! –í—Ä–µ–º—è: {datetime.now(MOSCOW_TZ).strftime('%H:%M:%S')}"

        await update.message.reply_text(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ <b>{channel_title}</b> ({tg_channel_id})...", parse_mode='HTML')
        
        try:
            await context.bot.send_message(chat_id=str(tg_channel_id), text=test_message)
            await update.message.reply_text(f"‚úÖ **–£–°–ü–ï–•!** –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", parse_mode='HTML')
        except Exception as e:
            await update.message.reply_text(f"‚ùå **–û–®–ò–ë–ö–ê!** –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç.\n\n–ö–æ–¥ –æ—à–∏–±–∫–∏: <code>{e}</code>\n\n"
                                          "<b>–í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞:</b> –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –ø—Ä–∞–≤–∞ '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π'.", 
                                          parse_mode='HTML')
                                          
    # --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ---
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω –∏ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–∏–∞–ª–æ–≥–∞
        if user_id not in ADMIN_IDS or user_id not in self.user_states: return

        state = self.user_states[user_id]
        text = update.message.text.strip() # –ò—Å–ø–æ–ª—å–∑—É–µ–º text.strip() –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        
        # 0. –í–´–ë–û–† –ö–ê–ù–ê–õ–ê (–ù–û–í–´–ô –ë–õ–û–ö)
        if state == 'awaiting_channel_choice':
            if text in context.user_data.get('available_channels', {}):
                # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –≤ –ë–î –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
                channel_db_id = context.user_data['available_channels'][text]
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏–∑ –ë–î –ø–æ ID
                channels = self.db.get_channels()
                target_channel = next((c for c in channels if c[0] == channel_db_id), None)
                
                if target_channel:
                    context.user_data['target_channel_id'] = channel_db_id
                    context.user_data['target_channel_title'] = target_channel[2] # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
                    
                    self.user_states[user_id] = 'awaiting_post_text'
                    await update.message.reply_text(
                        f"–û—Ç–ª–∏—á–Ω–æ! –í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: <b>{target_channel[2]}</b>. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞.", 
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –í—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                del context.user_data['available_channels'] # –û—á–∏—Å—Ç–∫–∞
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.", parse_mode='HTML')
            return


        # 1. –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–ò–í–Ø–ó–ö–ê (—á–µ—Ä–µ–∑ /add_channel)
        if state == 'awaiting_channel_forward':
            channel = None
            
            # 1. –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –ü–£–¢–¨: –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if update.message.forward_from_chat and update.message.forward_from_chat.type == 'channel':
                channel = update.message.forward_from_chat
                logger.info(f"Channel found via forward_from_chat: {channel.id}")
            
            # 2. –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–£–¢–¨: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ —á–∞—Ç–∞ (–¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤)
            elif update.message.sender_chat and update.message.sender_chat.type == 'channel':
                channel = update.message.sender_chat
                logger.warning(f"Channel found via sender_chat (anonymous/restricted): {channel.id}")

            if channel:
                title = channel.title
                username = channel.username if hasattr(channel, 'username') else None
                tg_channel_id = channel.id

                if self.db.add_channel(tg_channel_id, title, username):
                    await update.message.reply_text(
                        f"‚úÖ –ö–∞–Ω–∞–ª '<b>{title}</b>' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É!\n"
                        f"Telegram ID: <code>{tg_channel_id}</code>", 
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ (–ë–î).")
                del self.user_states[user_id] # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å—ã–ª–∫—É. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≤—è–∑–∞–Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ Telegram.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω–æ–π –≤–≤–æ–¥: <b>/manual_channel</b>"
                    , parse_mode='HTML'
                )

        # 2. –†–£–ß–ù–ê–Ø –ü–†–ò–í–Ø–ó–ö–ê (—á–µ—Ä–µ–∑ /manual_channel)
        elif state == 'awaiting_channel_manual_id':
            # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: -ID,–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
            match = re.match(r'^(-?\d+),(.*)$', text)
            
            if match:
                tg_channel_id = int(match.group(1))
                title = match.group(2).strip()
                username = None
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ API –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                try:
                    chat_info = await context.bot.get_chat(chat_id=tg_channel_id)
                    title = chat_info.title
                    username = chat_info.username
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–∞–Ω–∞–ª (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ, –µ—Å–ª–∏ chat_info –¥–æ—Å—Ç—É–ø–Ω–æ)
                    if chat_info.type not in ['channel', 'supergroup']:
                        await update.message.reply_text("‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π ID –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã.")
                        return

                except Exception as e:
                    logger.warning(f"Failed to get chat info manually for ID {tg_channel_id}: {e}")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ, —á—Ç–æ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ

                if self.db.add_channel(tg_channel_id, title, username):
                    await update.message.reply_text(
                        f"‚úÖ –ö–∞–Ω–∞–ª '<b>{title}</b>' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é!\n"
                        f"Telegram ID: <code>{tg_channel_id}</code>", 
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞ (–ë–î).")
                del self.user_states[user_id]
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>-ID,–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</code>", 
                    parse_mode='HTML'
                )

        # 3. –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –ü–û–°–¢–ê
        elif state == 'awaiting_post_text':
            context.user_data['post_text'] = update.message.text
            self.user_states[user_id] = 'awaiting_post_time'
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ –ú–°–ö).\n\n"
                "<b>–§–æ—Ä–º–∞—Ç:</b> <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code>\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>2025-12-31 18:00</code>",
                parse_mode='HTML'
            )

        # 4. –î–û–ë–ê–í–õ–ï–ù–ò–ï –í–†–ï–ú–ï–ù–ò –ü–û–°–¢–ê
        elif state == 'awaiting_post_time':
            try:
                naive_time = datetime.strptime(update.message.text, '%Y-%m-%d %H:%M')
                aware_time = MOSCOW_TZ.localize(naive_time)

                if aware_time <= datetime.now(MOSCOW_TZ):
                    await update.message.reply_text("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return

                channel_db_id = context.user_data['target_channel_id']
                post_text = context.user_data['post_text']
                
                if self.db.add_post(channel_db_id, post_text, aware_time.strftime('%Y-%m-%d %H:%M:%S')):
                    channel_title = context.user_data['target_channel_title']
                    await update.message.reply_text(
                        f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª <b>{channel_title}</b> –Ω–∞ <b>{aware_time.strftime('%d.%m.%Y %H:%M')}</b>.", 
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞ (–ë–î).")
                
                del self.user_states[user_id]
                context.user_data.clear()

            except (ValueError, TypeError):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code>.", parse_mode='HTML')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()
    bot = SchedulerBot()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    job_queue = application.job_queue
    job_queue.run_repeating(bot.check_posts_job, interval=10, first=5)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("status", bot.status))
    application.add_handler(CommandHandler("time", bot.show_time)) # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    application.add_handler(CommandHandler("add_channel", bot.add_channel))
    application.add_handler(CommandHandler("manual_channel", bot.manual_channel))
    application.add_handler(CommandHandler("channels", bot.list_channels))
    application.add_handler(CommandHandler("add_post", bot.add_post))
    application.add_handler(CommandHandler("posts", bot.list_posts))
    application.add_handler(CommandHandler("test_post", bot.test_post))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    application.add_handler(MessageHandler(filters.FORWARDED & ~filters.COMMAND, bot.handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()
