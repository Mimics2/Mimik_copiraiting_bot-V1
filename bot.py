import logging
from datetime import datetime
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, JobQueue
import pytz

from config import BOT_TOKEN, ADMIN_IDS
from database import Database

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MOSCOW_TZ = pytz.timezone('Europe/Moscow')

class SchedulerBot:
    def __init__(self):
        self.db = Database()
        self.start_time = datetime.now(MOSCOW_TZ)
        self.user_states = {}
    
    async def check_posts_job(self, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
        try:
            posts = self.db.get_posts()
            current_time = datetime.now(MOSCOW_TZ)
            
            for post in posts:
                post_id, channel_id, message_text, scheduled_time, status, created_date, channel_title, tg_channel_id = post
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ –±–∞–∑—ã –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                post_time_naive = datetime.strptime(scheduled_time, '%Y-%m-%d %H:%M:%S')
                post_time = MOSCOW_TZ.localize(post_time_naive)
                
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏—à–ª–æ, –ø—É–±–ª–∏–∫—É–µ–º
                if post_time <= current_time:
                    logger.info(f"–ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç {post_id} –≤ –∫–∞–Ω–∞–ª {tg_channel_id}")
                    await self.publish_post(post_id, tg_channel_id, message_text, context)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Å—Ç–æ–≤: {e}")
    
    async def publish_post(self, post_id, channel_id, message_text, context: ContextTypes.DEFAULT_TYPE):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª"""
        try:
            await context.bot.send_message(
                chat_id=channel_id,
                text=message_text
            )
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ"
            self.db.update_post_status(post_id, 'published')
            logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {channel_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
            self.db.update_post_status(post_id, 'error')
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É")
            return
        
        current_time = datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')
        posts = self.db.get_posts()
        
        await update.message.reply_text(
            f"ü§ñ <b>–ë–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π</b>\n\n"
            f"‚è∞ <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b> {current_time} (–ú–°–ö)\n"
            f"üìä <b>–í –æ—á–µ—Ä–µ–¥–∏:</b> {len(posts)} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n\n"
            "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
            "/status - –°—Ç–∞—Ç—É—Å\n"
            "/time - –í—Ä–µ–º—è\n"
            "/add_channel - –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª\n"
            "/add_post - –î–æ–±–∞–≤–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é\n"
            "/posts - –°–ø–∏—Å–æ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–π",
            parse_mode='HTML'
        )
    
    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            return
        
        current_time = datetime.now(MOSCOW_TZ)
        uptime = current_time - self.start_time
        hours, remainder = divmod(uptime.total_seconds(), 3600)
        minutes, seconds = divmod(remainder, 60)
        
        channels = self.db.get_channels()
        posts = self.db.get_posts()
        
        # –ë–ª–∏–∂–∞–π—à–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
        next_post = "–ù–µ—Ç"
        if posts:
            next_post_time = min([datetime.strptime(p[3], '%Y-%m-%d %H:%M:%S') for p in posts])
            next_post = MOSCOW_TZ.localize(next_post_time).strftime('%d.%m.%Y %H:%M')
        
        message = (
            f"ü§ñ <b>–°–¢–ê–¢–£–° –ë–û–¢–ê</b>\n\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {current_time.strftime('%d.%m.%Y %H:%M:%S')} (–ú–°–ö)\n"
            f"üïê <b>–†–∞–±–æ—Ç–∞–µ—Ç:</b> {int(hours)}—á {int(minutes)}–º\n"
            f"üìä <b>–ö–∞–Ω–∞–ª–æ–≤:</b> {len(channels)}\n"
            f"üìÖ <b>–í –æ—á–µ—Ä–µ–¥–∏:</b> {len(posts)} –ø—É–±–ª–∏–∫–∞—Ü–∏–π\n"
            f"‚è± <b>–ë–ª–∏–∂–∞–π—à–∞—è:</b> {next_post}\n"
            f"üü¢ <b>–°—Ç–∞—Ç—É—Å:</b> –ê–∫—Ç–∏–≤–µ–Ω"
        )
        
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def show_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            return
        
        current_time = datetime.now(MOSCOW_TZ)
        await update.message.reply_text(
            f"‚è∞ <b>–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:</b>\n{current_time.strftime('%d.%m.%Y %H:%M:%S')}",
            parse_mode='HTML'
        )
    
    async def add_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            return
        
        await update.message.reply_text(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</b>\n\n"
            "1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "2. –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–æ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "3. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –≤ —ç—Ç–æ—Ç —á–∞—Ç",
            parse_mode='HTML'
        )
        self.user_states[user_id] = 'awaiting_channel'
    
    async def list_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            return
        
        channels = self.db.get_channels()
        
        if not channels:
            await update.message.reply_text("üì≠ –ö–∞–Ω–∞–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            return
        
        message = "üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b>\n\n"
        for channel in channels:
            message += f"‚Ä¢ {channel[2]} (@{channel[3]})\n"
        
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def add_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            return
        
        channels = self.db.get_channels()
        
        if not channels:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ /add_channel")
            return
        
        await update.message.reply_text(
            "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:",
            parse_mode='HTML'
        )
        self.user_states[user_id] = 'awaiting_post_text'
        context.user_data['channel_id'] = channels[0][0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª
    
    async def list_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            return
        
        posts = self.db.get_posts()
        
        if not posts:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
            return
        
        message = "üìã <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n\n"
        for post in posts:
            post_time = datetime.strptime(post[3], '%Y-%m-%d %H:%M:%S')
            moscow_time = MOSCOW_TZ.localize(post_time)
            time_str = moscow_time.strftime('%d.%m.%Y %H:%M')
            message += f"‚Ä¢ {time_str} - {post[6]}\n"
        
        await update.message.reply_text(message, parse_mode='HTML')
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        
        if user_id not in ADMIN_IDS:
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
        if self.user_states.get(user_id) == 'awaiting_channel' and update.message.forward_from_chat:
            channel = update.message.forward_from_chat
            
            if channel.type == 'channel':
                success = self.db.add_channel(channel.id, channel.title, channel.username)
                
                if success:
                    await update.message.reply_text(f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel.title}</b> –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode='HTML')
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞")
                
                self.user_states[user_id] = None
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
        if self.user_states.get(user_id) == 'awaiting_post_text':
            context.user_data['post_text'] = update.message.text
            
            await update.message.reply_text(
                "‚è∞ <b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
                "–§–æ—Ä–º–∞—Ç: <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>2024-12-25 15:30</code>",
                parse_mode='HTML'
            )
            self.user_states[user_id] = 'awaiting_post_time'
            return
        
        if self.user_states.get(user_id) == 'awaiting_post_time':
            try:
                # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
                naive_time = datetime.strptime(update.message.text, '%Y-%m-%d %H:%M')
                moscow_time = MOSCOW_TZ.localize(naive_time)
                current_time = datetime.now(MOSCOW_TZ)
                
                if moscow_time <= current_time:
                    await update.message.reply_text("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!")
                    return
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑—É
                channel_id = context.user_data.get('channel_id')
                post_text = context.user_data.get('post_text', '')
                
                success = self.db.add_post(channel_id, post_text, moscow_time.strftime('%Y-%m-%d %H:%M:%S'))
                
                if success:
                    await update.message.reply_text(
                        f"‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {moscow_time.strftime('%d.%m.%Y %H:%M')} (–ú–°–ö)\n\n"
                        f"–¢–µ–∫—Å—Ç: {post_text[:100]}..."
                    )
                    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ {moscow_time}")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.user_states[user_id] = None
                context.user_data.clear()
                
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å JobQueue
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    bot = SchedulerBot()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤
    job_queue = application.job_queue
    job_queue.run_repeating(bot.check_posts_job, interval=10, first=1)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("status", bot.status))
    application.add_handler(CommandHandler("time", bot.show_time))
    application.add_handler(CommandHandler("add_channel", bot.add_channel))
    application.add_handler(CommandHandler("channels", bot.list_channels))
    application.add_handler(CommandHandler("add_post", bot.add_post))
    application.add_handler(CommandHandler("posts", bot.list_posts))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å JobQueue!")
    print("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥")
    print("üìä –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status")
    
    application.run_polling()

if __name__ == '__main__':
    main()
