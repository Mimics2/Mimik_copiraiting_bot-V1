import logging
from datetime import datetime
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from config import BOT_TOKEN, ADMIN_IDS
from database import Database

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∞–π–º–∑–æ–Ω—É –∏–∑ config, –µ—Å–ª–∏ –æ–Ω–∞ —Ç–∞–º –µ—Å—Ç—å, –∏–Ω–∞—á–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ú–æ—Å–∫–≤–∞)
try:
    from config import MOSCOW_TZ
except ImportError:
    MOSCOW_TZ = pytz.timezone('Europe/Moscow')

class SchedulerBot:
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –∫ –ë–î –∏–∑ database.py, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å, –∏–Ω–∞—á–µ bot.db
        try:
            self.db = Database('scheduler.db') 
        except Exception:
            self.db = Database('bot.db')

        self.start_time = datetime.now(MOSCOW_TZ)
        self.user_states = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    # --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–ø—Ä–æ–ø—É—â–µ–Ω–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏) ---
    async def check_posts_job(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        try:
            posts = self.db.get_posts()
            current_time = datetime.now(MOSCOW_TZ)

            for post in posts:
                post_id, _, message_text, scheduled_time_str, _, _, _, tg_channel_id = post
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
                post_time_naive = datetime.strptime(scheduled_time_str, '%Y-%m-%d %H:%M:%S')
                post_time_aware = MOSCOW_TZ.localize(post_time_naive)

                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–∏—à–ª–æ
                if post_time_aware <= current_time:
                    try:
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞
                        await context.bot.send_message(
                            chat_id=tg_channel_id, 
                            text=message_text,
                            parse_mode='HTML' # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞
                        )
                        self.db.update_post_status(post_id, 'published')
                        logger.info(f"–ü–æ—Å—Ç {post_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {tg_channel_id}")
                    except Exception as e:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç {post_id} –≤ {tg_channel_id}: {e}")
                        self.db.update_post_status(post_id, 'error')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ check_posts_job: {e}")


    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

    async def _check_admin(self, update: Update) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return False
        return True

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self._check_admin(update): return
        
        message = (
            "ü§ñ **–ë–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.**\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ `/add_channel` - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª.\n"
            "‚Ä¢ `/add_post` - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç.\n"
            "‚Ä¢ `/channels` - –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
            "‚Ä¢ `/posts` - –°–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.\n"
            "‚Ä¢ `/status` - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."
        )
        await update.message.reply_text(message, parse_mode='Markdown')

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self._check_admin(update): return

        uptime = datetime.now(MOSCOW_TZ) - self.start_time
        channels_count = len(self.db.get_channels())
        posts_count = len(self.db.get_posts())

        message = (
            "‚úÖ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:** –†–∞–±–æ—Ç–∞–µ—Ç\n"
            f"üï∞Ô∏è **–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ (–ú–°–ö):** {self.start_time.strftime('%d.%m.%Y %H:%M:%S')}\n"
            f"‚è≥ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {str(timedelta(seconds=int(uptime.total_seconds())))}\n"
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:**\n"
            f"  ‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤ –ø—Ä–∏–≤—è–∑–∞–Ω–æ: {channels_count}\n"
            f"  ‚Ä¢ –ü–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {posts_count}"
        )
        await update.message.reply_text(message, parse_mode='Markdown')

    async def add_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self._check_admin(update): return
        
        user_id = update.effective_user.id
        self.user_states[user_id] = 'awaiting_channel_forward'
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å **–ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ** –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≤—è–∑–∞—Ç—å.")

    async def list_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self._check_admin(update): return

        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
            return

        message = "üìã **–ü—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:**\n\n"
        for idx, channel in enumerate(channels, 1):
            title = channel[2]
            username = channel[3] or "–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞"
            tg_id = channel[1] # telegram_channel_id
            
            message += f"**{idx}. {title}**\n"
            message += f"ID: `{tg_id}`\n"
            if channel[3]:
                message += f"@{username}\n"
            message += "‚Äî\n"

        await update.message.reply_text(message, parse_mode='Markdown')

    async def add_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self._check_admin(update): return
        
        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–≤—è–∂–∏—Ç–µ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π `/add_channel`.")
            return

        user_id = update.effective_user.id
        self.user_states[user_id] = 'awaiting_post_details'
        context.user_data['channels'] = channels
        
        # –®–∞–≥ 1: –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞
        channel_list = "\n".join([
            f"**{i}.** {c[2]} (`{c[1]}`)" for i, c in enumerate(channels, 1)
        ])
        
        message = (
            "üìù **–®–∞–≥ 1/3: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ **–Ω–æ–º–µ—Ä** –∫–∞–Ω–∞–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:\n\n"
            f"{channel_list}"
        )
        await update.message.reply_text(message, parse_mode='Markdown')

    async def list_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not await self._check_admin(update): return
        
        posts = self.db.get_posts() # –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ scheduled
        if not posts:
            await update.message.reply_text("ü§∑‚Äç‚ôÇÔ∏è –í –æ—á–µ—Ä–µ–¥–∏ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
            return
        
        message = f"üìã **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏** (–ú–°–ö):\n\n"
        
        for post in posts:
            post_time = datetime.strptime(post[3], '%Y-%m-%d %H:%M:%S')
            moscow_time = MOSCOW_TZ.localize(post_time)
            time_str = moscow_time.strftime('%d.%m.%Y %H:%M')
            channel_title = post[6]
            
            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∏—Å–∫–∞
            text_snippet = post[2][:50].replace('\n', ' ') + ('...' if len(post[2]) > 50 else '')
            
            message += f"‚Ä¢ **{time_str}** –≤ **{channel_title}**\n"
            message += f"  –¢–µ–∫—Å—Ç: _{text_snippet}_\n"
            message += "‚Äî\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π ---

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        user_state = self.user_states.get(user_id)
        
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞–Ω–∞–ª–∞
        if user_state == 'awaiting_channel_forward':
            # --- –õ–û–ì–ò–ö–ê –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú–´ ---
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            is_forwarded = bool(update.message.forward_from_chat)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ —á–∞—Ç–∞ (–¥–ª—è –ø–æ—Å—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–∞—Ö)
            is_from_sender_chat = bool(update.message.sender_chat)

            logger.info(f"Forwarded check: is_forwarded={is_forwarded}")

            if is_forwarded:
                # 1. –û—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å: –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
                channel = update.message.forward_from_chat
                logger.info(f"Forwarded chat info: type={channel.type}, title={channel.title}, id={channel.id}")

                if channel.type == 'channel':
                    title = channel.title
                    username = channel.username if channel.username else None
                    tg_channel_id = channel.id
                    
                    if self.db.add_channel(tg_channel_id, title, username):
                        await update.message.reply_text(
                            f"‚úÖ –ö–∞–Ω–∞–ª **{title}** –ø—Ä–∏–≤—è–∑–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n"
                            f"ID: `{tg_channel_id}`",
                            parse_mode='Markdown'
                        )
                    else:
                        await update.message.reply_text("‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.** –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞.")
                    
                    del self.user_states[user_id]
                    return
                else:
                    await update.message.reply_text(
                        "‚ùå –ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ **–∫–∞–Ω–∞–ª–∞** (—Ç–∏–ø: `{}`). –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç–µ –ø–æ—Å—Ç –∏–∑ —Å–∞–º–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –∞ –Ω–µ –∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è.".format(channel.type),
                        parse_mode='Markdown'
                    )
                    return
            
            elif is_from_sender_chat and update.message.sender_chat.type in ('channel', 'supergroup'):
                # 2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç –∏–º–µ–Ω–∏ —á–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω), –Ω–æ –Ω–µ –∫–∞–∫ —Ñ–æ—Ä–≤–∞—Ä–¥
                channel = update.message.sender_chat
                logger.warning(f"Using sender_chat: type={channel.type}, title={channel.title}, id={channel.id}")

                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è. **–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ** —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ **–æ—Ç–∫–ª—é—á–∏–≤ –≤ –∫–∞–Ω–∞–ª–µ** –Ω–∞—Å—Ç—Ä–æ–π–∫—É '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'."
                )
                # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
                return


            await update.message.reply_text(
                "‚ùå **–≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
                "**–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:**\n"
                "1. –í –∫–∞–Ω–∞–ª–µ –≤–∫–ª—é—á–µ–Ω–æ '–ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'. **–û—Ç–∫–ª—é—á–∏—Ç–µ** –µ–µ –≤—Ä–µ–º–µ–Ω–Ω–æ.\n"
                "2. –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É `/add_channel` –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π.\n"
                "3. –í—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ *–≥—Ä—É–ø–ø—ã*, –∞ –Ω–µ –∏–∑ *–∫–∞–Ω–∞–ª–∞*."
            )
            return

        # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ (–®–∞–≥ 1: –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞)
        if user_state == 'awaiting_post_details':
            try:
                channel_number = int(update.message.text.strip())
                channels = context.user_data.get('channels', [])
                
                if 1 <= channel_number <= len(channels):
                    selected_channel = channels[channel_number - 1]
                    context.user_data['selected_channel'] = selected_channel
                    self.user_states[user_id] = 'awaiting_post_text'
                    
                    await update.message.reply_text("üìù **–®–∞–≥ 2/3: –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞.**\n\n–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML-—Ä–∞–∑–º–µ—Ç–∫—É.")
                else:
                    await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")

            except ValueError:
                await update.message.reply_text("‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ **–Ω–æ–º–µ—Ä–∞**, –∞ –Ω–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
            return

        # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ (–®–∞–≥ 2: –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞)
        if user_state == 'awaiting_post_text':
            post_text = update.message.text
            context.user_data['post_text'] = post_text
            self.user_states[user_id] = 'awaiting_schedule_time'
            
            await update.message.reply_text(
                "‚è∞ **–®–∞–≥ 3/3: –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏** (–≤ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏).\n\n"
                "–§–æ—Ä–º–∞—Ç: `–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `2025-10-20 18:30`)"
            )
            return

        # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ (–®–∞–≥ 3: –í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏)
        if user_state == 'awaiting_schedule_time':
            schedule_time_str = update.message.text.strip()
            
            try:
                # –ü–∞—Ä—Å–∏–Ω–≥ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
                naive_time = datetime.strptime(schedule_time_str, '%Y-%m-%d %H:%M')
                scheduled_time_aware = MOSCOW_TZ.localize(naive_time)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
                if scheduled_time_aware <= datetime.now(MOSCOW_TZ):
                    await update.message.reply_text("‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º.")
                    return
                
                channel_db_id = context.user_data['selected_channel'][0]
                post_text = context.user_data['post_text']

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
                if self.db.add_post(channel_db_id, post_text, naive_time.strftime('%Y-%m-%d %H:%M:%S')):
                    channel_title = context.user_data['selected_channel'][2]
                    await update.message.reply_text(
                        f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!\n\n"
                        f"**–ö–∞–Ω–∞–ª:** {channel_title}\n"
                        f"**–í—Ä–µ–º—è (–ú–°–ö):** {scheduled_time_aware.strftime('%d.%m.%Y %H:%M')}",
                        parse_mode='Markdown'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
                
                # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö
                del self.user_states[user_id]
                context.user_data.clear()

            except (ValueError, TypeError):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú`.", parse_mode='HTML')


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()
    bot = SchedulerBot()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    job_queue = application.job_queue
    job_queue.run_repeating(bot.check_posts_job, interval=10, first=5)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("status", bot.status))
    application.add_handler(CommandHandler("add_channel", bot.add_channel))
    application.add_handler(CommandHandler("channels", bot.list_channels))
    application.add_handler(CommandHandler("add_post", bot.add_post))
    application.add_handler(CommandHandler("posts", bot.list_posts))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    application.add_handler(MessageHandler(filters.FORWARDED & ~filters.COMMAND, bot.handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

