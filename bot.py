import logging
from datetime import datetime
from datetime import timedelta # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç timedelta
import pytz
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

from config import BOT_TOKEN, ADMIN_IDS
from database import Database

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ MOSCOW_TZ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

class SchedulerBot:
    def __init__(self):
        # –ï—Å–ª–∏ database.py –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π –ø—É—Ç—å, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω —Å—é–¥–∞
        self.db = Database() 
        self.start_time = datetime.now(MOSCOW_TZ)
        self.user_states = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞)

    # --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
    async def check_posts_job(self, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."""
        try:
            posts = self.db.get_posts()
            current_time = datetime.now(MOSCOW_TZ)

            for post in posts:
                # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: post_id, channel_db_id, message_text, scheduled_time_str, status, created_date, channel_title, tg_channel_id
                post_id, _, message_text, scheduled_time_str, _, _, _, tg_channel_id = post
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime
                post_time_naive = datetime.strptime(scheduled_time_str, '%Y-%m-%d %H:%M:%S')
                post_time_aware = MOSCOW_TZ.localize(post_time_naive)

                # –ï—Å–ª–∏ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞—Å—Ç–∞–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
                if post_time_aware <= current_time:
                    logger.info(f"–ü—É–±–ª–∏–∫—É—é –ø–æ—Å—Ç {post_id} –≤ –∫–∞–Ω–∞–ª {tg_channel_id}")
                    await self.publish_post(post_id, tg_channel_id, message_text, context)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤: {e}")

    async def publish_post(self, post_id, channel_id, message_text, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞."""
        try:
            # chat_id –≤ Telegram –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–≤–æ–π ID
            await context.bot.send_message(chat_id=str(channel_id), text=message_text, parse_mode='HTML') 
            self.db.update_post_status(post_id, 'published')
            logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª {channel_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id}: {e}")
            self.db.update_post_status(post_id, 'error')

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in ADMIN_IDS:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        await update.message.reply_text(
            "<b>ü§ñ –ë–æ—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–π</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ –ø–æ—Å—Ç–∞–º–∏.\n\n"
            "/status - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
            "/add_channel - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª\n"
            "/channels - –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
            "/add_post - –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç\n"
            "/posts - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã",
            parse_mode='HTML'
        )

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in ADMIN_IDS: return

        uptime = datetime.now(MOSCOW_TZ) - self.start_time
        hours, rem = divmod(uptime.total_seconds(), 3600)
        minutes, _ = divmod(rem, 60)
        
        channels = self.db.get_channels()
        posts = self.db.get_posts()
        
        next_post_str = "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"
        if posts:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç, –æ–Ω –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ scheduled_time
            next_post_time_naive = datetime.strptime(posts[0][3], '%Y-%m-%d %H:%M:%S') 
            next_post_str = MOSCOW_TZ.localize(next_post_time_naive).strftime('%d.%m.%Y –≤ %H:%M')

        message = (
            f"<b>ü§ñ –°–¢–ê–¢–£–° –ë–û–¢–ê</b>\n\n"
            f"<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> {int(hours)}—á {int(minutes)}–º\n"
            f"<b>–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤:</b> {len(channels)}\n"
            f"<b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤:</b> {len(posts)}\n"
            f"<b>–°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç:</b> {next_post_str}\n"
            f"<b>–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è:</b> {datetime.now(MOSCOW_TZ).strftime('%d.%m.%Y %H:%M:%S')}"
        )
        await update.message.reply_text(message, parse_mode='HTML')

    async def add_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in ADMIN_IDS: return
        self.user_states[update.effective_user.id] = 'awaiting_channel'
        await update.message.reply_text(
            "<b>–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª:</b>\n"
            "1. –°–¥–µ–ª–∞–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≤–∞—à–µ–º –∫–∞–Ω–∞–ª–µ —Å –ø—Ä–∞–≤–æ–º –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
            "2. –ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.",
            parse_mode='HTML'
        )

    async def list_channels(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in ADMIN_IDS: return
        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("–ö–∞–Ω–∞–ª—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add_channel.")
            return
        
        message = "<b>üìã –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ channel: id, channel_id (TG ID), title, username, added_date
        for channel_id_db, tg_id, title, username, _ in channels:
            message += f"‚Ä¢ {title} (ID: <code>{tg_id}</code>, {f'@{username}' if username else '–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞'})\n"
        await update.message.reply_text(message, parse_mode='HTML')

    async def add_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in ADMIN_IDS: return
        channels = self.db.get_channels()
        if not channels:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª —Å –ø–æ–º–æ—â—å—é /add_channel.")
            return

        # –í –≤–∞—à–µ–º –∫–æ–¥–µ –±—ã–ª —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –õ—É—á—à–µ –¥–∞—Ç—å –≤—ã–±–æ—Ä.
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Å—Ç–∞–≤–ª—è–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä, –Ω–æ –æ–Ω –º–æ–∂–µ—Ç —Å–±–∏—Ç—å —Å —Ç–æ–ª–∫—É.
        context.user_data['target_channel_db_id'] = channels[0][0] # ID –∏–∑ –ë–î
        context.user_data['target_channel_tg_id'] = channels[0][1] # TG ID
        context.user_data['target_channel_title'] = channels[0][2] # –ù–∞–∑–≤–∞–Ω–∏–µ
        
        self.user_states[update.effective_user.id] = 'awaiting_post_text'
        await update.message.reply_text(
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª: <b>{channels[0][2]}</b>.",
            parse_mode='HTML'
        )

    async def list_posts(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id not in ADMIN_IDS: return
        posts = self.db.get_posts()
        if not posts:
            await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")
            return

        message = "<b>üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã (–ø–æ –ú–°–ö):</b>\n\n"
        for post in posts:
            # –°—Ç—Ä—É–∫—Ç—É—Ä–∞: post_id, channel_db_id, message_text, scheduled_time_str, status, created_date, channel_title, tg_channel_id
            _, _, message_text, scheduled_time_str, _, _, channel_title, _ = post
            
            post_time_naive = datetime.strptime(scheduled_time_str, '%Y-%m-%d %H:%M:%S')
            time_formatted = MOSCOW_TZ.localize(post_time_naive).strftime('%d.%m.%Y %H:%M')
            
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
            text_snippet = message_text[:40].replace('\n', ' ') + ('...' if len(message_text) > 40 else '')
            
            message += f"‚Ä¢ <b>{time_formatted}</b> –≤ '{channel_title}'\n"
            message += f"  _–¢–µ–∫—Å—Ç: {text_snippet}_\n"
            message += "‚Äî\n"
            
        await update.message.reply_text(message, parse_mode='HTML')

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π ---
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS or user_id not in self.user_states: return

        state = self.user_states[user_id]

        if state == 'awaiting_channel':
            channel = None
            
            # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –û–ë–•–û–î–ê –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ô ---
            
            # 1. –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –ü–£–¢–¨: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ã—á–Ω—É—é –ø–µ—Ä–µ—Å—ã–ª–∫—É –∏–∑ –∫–∞–Ω–∞–ª–∞
            if update.message.forward_from_chat and update.message.forward_from_chat.type == 'channel':
                channel = update.message.forward_from_chat
                logger.info(f"Channel found via forward_from_chat: {channel.id}")
            
            # 2. –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–ô –ü–£–¢–¨: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º —Å–∞–º —á–∞—Ç (–∫–∞–Ω–∞–ª/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞)
            # –≠—Ç–æ —á–∞—Å—Ç–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ä–≤–∞—Ä–¥–∏–Ω–≥ –∏–ª–∏ –ø—Ä–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏.
            elif update.message.sender_chat and update.message.sender_chat.type == 'channel':
                # –í–ê–ñ–ù–û: –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ sender_chat, –º—ã –¥–æ–ª–∂–Ω—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–∞–Ω–∞–ª, 
                # –∞ –Ω–µ –∞–Ω–æ–Ω–∏–º–Ω—ã–π –∞–¥–º–∏–Ω –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Ç–≤–æ—Ä—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º.
                # –¢–∞–∫ –∫–∞–∫ –Ω–∞–º –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ ID, —Ç–æ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
                channel = update.message.sender_chat
                logger.warning(f"Channel found via sender_chat: {channel.id}")

            if channel:
                if self.db.add_channel(channel.id, channel.title, channel.username):
                    await update.message.reply_text(
                        f"‚úÖ –ö–∞–Ω–∞–ª '<b>{channel.title}</b>' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                        f"ID: <code>{channel.id}</code>", 
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ (database.py).")
                
                del self.user_states[user_id] # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            else:
                await update.message.reply_text(
                    "‚ùå –≠—Ç–æ –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –±–æ—Ç –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–≥–æ ID. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ: "
                    "1. –í—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ö–ê–ù–ê–õ–ê (–∞ –Ω–µ –≥—Ä—É–ø–ø—ã). "
                    "2. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. "
                    "3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –¥—Ä—É–≥–æ–µ, –±–æ–ª–µ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                )

        elif state == 'awaiting_post_text':
            context.user_data['post_text'] = update.message.text
            self.user_states[user_id] = 'awaiting_post_time'
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ –ú–°–ö).\n\n"
                "<b>–§–æ—Ä–º–∞—Ç:</b> <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code>\n"
                "<b>–ü—Ä–∏–º–µ—Ä:</b> <code>2025-12-31 18:00</code>",
                parse_mode='HTML'
            )

        elif state == 'awaiting_post_time':
            try:
                naive_time = datetime.strptime(update.message.text, '%Y-%m-%d %H:%M')
                aware_time = MOSCOW_TZ.localize(naive_time)

                if aware_time <= datetime.now(MOSCOW_TZ):
                    await update.message.reply_text("‚ùå –≠—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return

                channel_db_id = context.user_data['target_channel_db_id']
                post_text = context.user_data['post_text']
                
                if self.db.add_post(channel_db_id, post_text, aware_time.strftime('%Y-%m-%d %H:%M:%S')):
                    channel_title = context.user_data['target_channel_title']
                    await update.message.reply_text(
                        f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª <b>{channel_title}</b> –Ω–∞ <b>{aware_time.strftime('%d.%m.%Y %H:%M')}</b>.",
                        parse_mode='HTML'
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞.")
                
                del self.user_states[user_id]
                context.user_data.clear()

            except (ValueError, TypeError):
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú</code>.", parse_mode='HTML')

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()
    bot = SchedulerBot()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    job_queue = application.job_queue
    job_queue.run_repeating(bot.check_posts_job, interval=10, first=5)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("status", bot.status))
    application.add_handler(CommandHandler("add_channel", bot.add_channel))
    application.add_handler(CommandHandler("channels", bot.list_channels))
    application.add_handler(CommandHandler("add_post", bot.add_post))
    application.add_handler(CommandHandler("posts", bot.list_posts))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    # –í–∞–∂–Ω–æ: filters.FORWARDED —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç forward_from_chat –∏–ª–∏ forward_from
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, bot.handle_message))
    application.add_handler(MessageHandler(filters.FORWARDED & ~filters.COMMAND, bot.handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()

